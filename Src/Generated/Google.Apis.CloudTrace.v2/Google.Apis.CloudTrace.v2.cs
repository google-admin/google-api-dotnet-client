// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by google-apis-code-generator 1.5.1
//     C# generator version: 1.29.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

/**
 * \brief
 *   Stackdriver Trace API Version v2
 *
 * \section ApiInfo API Version Information
 *    <table>
 *      <tr><th>API
 *          <td><a href='https://cloud.google.com/trace'>Stackdriver Trace API</a>
 *      <tr><th>API Version<td>v2
 *      <tr><th>API Rev<td>20170927 (1000)
 *      <tr><th>API Docs
 *          <td><a href='https://cloud.google.com/trace'>
 *              https://cloud.google.com/trace</a>
 *      <tr><th>Discovery Name<td>cloudtrace
 *    </table>
 *
 * \section ForMoreInfo For More Information
 *
 * The complete API documentation for using Stackdriver Trace API can be found at
 * <a href='https://cloud.google.com/trace'>https://cloud.google.com/trace</a>.
 *
 * For more information about the Google APIs Client Library for .NET, see
 * <a href='https://developers.google.com/api-client-library/dotnet/get_started'>
 * https://developers.google.com/api-client-library/dotnet/get_started</a>
 */

namespace Google.Apis.CloudTrace.v2
{
    /// <summary>The CloudTrace Service.</summary>
    public class CloudTraceService : Google.Apis.Services.BaseClientService
    {
        /// <summary>The API version.</summary>
        public const string Version = "v2";

        /// <summary>The discovery version used to generate this service.</summary>
        public static Google.Apis.Discovery.DiscoveryVersion DiscoveryVersionUsed =
            Google.Apis.Discovery.DiscoveryVersion.Version_1_0;

        /// <summary>Constructs a new service.</summary>
        public CloudTraceService() :
            this(new Google.Apis.Services.BaseClientService.Initializer()) {}

        /// <summary>Constructs a new service.</summary>
        /// <param name="initializer">The service initializer.</param>
        public CloudTraceService(Google.Apis.Services.BaseClientService.Initializer initializer)
            : base(initializer)
        {
            projects = new ProjectsResource(this);
        }

        /// <summary>Gets the service supported features.</summary>
        public override System.Collections.Generic.IList<string> Features
        {
            get { return new string[0]; }
        }

        /// <summary>Gets the service name.</summary>
        public override string Name
        {
            get { return "cloudtrace"; }
        }

        /// <summary>Gets the service base URI.</summary>
        public override string BaseUri
        {
            get { return "https://cloudtrace.googleapis.com/"; }
        }

        /// <summary>Gets the service base path.</summary>
        public override string BasePath
        {
            get { return ""; }
        }

        #if !NET40
        /// <summary>Gets the batch base URI; <c>null</c> if unspecified.</summary>
        public override string BatchUri
        {
            get { return "https://cloudtrace.googleapis.com/batch"; }
        }

        /// <summary>Gets the batch base path; <c>null</c> if unspecified.</summary>
        public override string BatchPath
        {
            get { return "batch"; }
        }
        #endif

        /// <summary>Available OAuth 2.0 scopes for use with the Stackdriver Trace API.</summary>
        public class Scope
        {
            /// <summary>View and manage your data across Google Cloud Platform services</summary>
            public static string CloudPlatform = "https://www.googleapis.com/auth/cloud-platform";

            /// <summary>Write Trace data for a project or application</summary>
            public static string TraceAppend = "https://www.googleapis.com/auth/trace.append";

        }



        private readonly ProjectsResource projects;

        /// <summary>Gets the Projects resource.</summary>
        public virtual ProjectsResource Projects
        {
            get { return projects; }
        }
    }

    ///<summary>A base abstract class for CloudTrace requests.</summary>
    public abstract class CloudTraceBaseServiceRequest<TResponse> : Google.Apis.Requests.ClientServiceRequest<TResponse>
    {
        ///<summary>Constructs a new CloudTraceBaseServiceRequest instance.</summary>
        protected CloudTraceBaseServiceRequest(Google.Apis.Services.IClientService service)
            : base(service)
        {
        }

        /// <summary>V1 error format.</summary>
        [Google.Apis.Util.RequestParameterAttribute("$.xgafv", Google.Apis.Util.RequestParameterType.Query)]
        public virtual System.Nullable<XgafvEnum> Xgafv { get; set; }

        /// <summary>V1 error format.</summary>
        public enum XgafvEnum
        {
            /// <summary>v1 error format</summary>
            [Google.Apis.Util.StringValueAttribute("1")]
            Value1,
            /// <summary>v2 error format</summary>
            [Google.Apis.Util.StringValueAttribute("2")]
            Value2,
        }

        /// <summary>OAuth access token.</summary>
        [Google.Apis.Util.RequestParameterAttribute("access_token", Google.Apis.Util.RequestParameterType.Query)]
        public virtual string AccessToken { get; set; }

        /// <summary>Data format for response.</summary>
        /// [default: json]
        [Google.Apis.Util.RequestParameterAttribute("alt", Google.Apis.Util.RequestParameterType.Query)]
        public virtual System.Nullable<AltEnum> Alt { get; set; }

        /// <summary>Data format for response.</summary>
        public enum AltEnum
        {
            /// <summary>Responses with Content-Type of application/json</summary>
            [Google.Apis.Util.StringValueAttribute("json")]
            Json,
            /// <summary>Media download with context-dependent Content-Type</summary>
            [Google.Apis.Util.StringValueAttribute("media")]
            Media,
            /// <summary>Responses with Content-Type of application/x-protobuf</summary>
            [Google.Apis.Util.StringValueAttribute("proto")]
            Proto,
        }

        /// <summary>OAuth bearer token.</summary>
        [Google.Apis.Util.RequestParameterAttribute("bearer_token", Google.Apis.Util.RequestParameterType.Query)]
        public virtual string BearerToken { get; set; }

        /// <summary>JSONP</summary>
        [Google.Apis.Util.RequestParameterAttribute("callback", Google.Apis.Util.RequestParameterType.Query)]
        public virtual string Callback { get; set; }

        /// <summary>Selector specifying which fields to include in a partial response.</summary>
        [Google.Apis.Util.RequestParameterAttribute("fields", Google.Apis.Util.RequestParameterType.Query)]
        public virtual string Fields { get; set; }

        /// <summary>API key. Your API key identifies your project and provides you with API access, quota, and reports.
        /// Required unless you provide an OAuth 2.0 token.</summary>
        [Google.Apis.Util.RequestParameterAttribute("key", Google.Apis.Util.RequestParameterType.Query)]
        public virtual string Key { get; set; }

        /// <summary>OAuth 2.0 token for the current user.</summary>
        [Google.Apis.Util.RequestParameterAttribute("oauth_token", Google.Apis.Util.RequestParameterType.Query)]
        public virtual string OauthToken { get; set; }

        /// <summary>Pretty-print response.</summary>
        /// [default: true]
        [Google.Apis.Util.RequestParameterAttribute("pp", Google.Apis.Util.RequestParameterType.Query)]
        public virtual System.Nullable<bool> Pp { get; set; }

        /// <summary>Returns response with indentations and line breaks.</summary>
        /// [default: true]
        [Google.Apis.Util.RequestParameterAttribute("prettyPrint", Google.Apis.Util.RequestParameterType.Query)]
        public virtual System.Nullable<bool> PrettyPrint { get; set; }

        /// <summary>Available to use for quota purposes for server-side applications. Can be any arbitrary string
        /// assigned to a user, but should not exceed 40 characters.</summary>
        [Google.Apis.Util.RequestParameterAttribute("quotaUser", Google.Apis.Util.RequestParameterType.Query)]
        public virtual string QuotaUser { get; set; }

        /// <summary>Legacy upload protocol for media (e.g. "media", "multipart").</summary>
        [Google.Apis.Util.RequestParameterAttribute("uploadType", Google.Apis.Util.RequestParameterType.Query)]
        public virtual string UploadType { get; set; }

        /// <summary>Upload protocol for media (e.g. "raw", "multipart").</summary>
        [Google.Apis.Util.RequestParameterAttribute("upload_protocol", Google.Apis.Util.RequestParameterType.Query)]
        public virtual string UploadProtocol { get; set; }

        /// <summary>Initializes CloudTrace parameter list.</summary>
        protected override void InitParameters()
        {
            base.InitParameters();

            RequestParameters.Add(
                "$.xgafv", new Google.Apis.Discovery.Parameter
                {
                    Name = "$.xgafv",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = null,
                    Pattern = null,
                });
            RequestParameters.Add(
                "access_token", new Google.Apis.Discovery.Parameter
                {
                    Name = "access_token",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = null,
                    Pattern = null,
                });
            RequestParameters.Add(
                "alt", new Google.Apis.Discovery.Parameter
                {
                    Name = "alt",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = "json",
                    Pattern = null,
                });
            RequestParameters.Add(
                "bearer_token", new Google.Apis.Discovery.Parameter
                {
                    Name = "bearer_token",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = null,
                    Pattern = null,
                });
            RequestParameters.Add(
                "callback", new Google.Apis.Discovery.Parameter
                {
                    Name = "callback",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = null,
                    Pattern = null,
                });
            RequestParameters.Add(
                "fields", new Google.Apis.Discovery.Parameter
                {
                    Name = "fields",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = null,
                    Pattern = null,
                });
            RequestParameters.Add(
                "key", new Google.Apis.Discovery.Parameter
                {
                    Name = "key",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = null,
                    Pattern = null,
                });
            RequestParameters.Add(
                "oauth_token", new Google.Apis.Discovery.Parameter
                {
                    Name = "oauth_token",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = null,
                    Pattern = null,
                });
            RequestParameters.Add(
                "pp", new Google.Apis.Discovery.Parameter
                {
                    Name = "pp",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = "true",
                    Pattern = null,
                });
            RequestParameters.Add(
                "prettyPrint", new Google.Apis.Discovery.Parameter
                {
                    Name = "prettyPrint",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = "true",
                    Pattern = null,
                });
            RequestParameters.Add(
                "quotaUser", new Google.Apis.Discovery.Parameter
                {
                    Name = "quotaUser",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = null,
                    Pattern = null,
                });
            RequestParameters.Add(
                "uploadType", new Google.Apis.Discovery.Parameter
                {
                    Name = "uploadType",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = null,
                    Pattern = null,
                });
            RequestParameters.Add(
                "upload_protocol", new Google.Apis.Discovery.Parameter
                {
                    Name = "upload_protocol",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = null,
                    Pattern = null,
                });
        }
    }

    /// <summary>The "projects" collection of methods.</summary>
    public class ProjectsResource
    {
        private const string Resource = "projects";

        /// <summary>The service which this resource belongs to.</summary>
        private readonly Google.Apis.Services.IClientService service;

        /// <summary>Constructs a new resource.</summary>
        public ProjectsResource(Google.Apis.Services.IClientService service)
        {
            this.service = service;
            traces = new TracesResource(service);

        }

        private readonly TracesResource traces;

        /// <summary>Gets the Traces resource.</summary>
        public virtual TracesResource Traces
        {
            get { return traces; }
        }

        /// <summary>The "traces" collection of methods.</summary>
        public class TracesResource
        {
            private const string Resource = "traces";

            /// <summary>The service which this resource belongs to.</summary>
            private readonly Google.Apis.Services.IClientService service;

            /// <summary>Constructs a new resource.</summary>
            public TracesResource(Google.Apis.Services.IClientService service)
            {
                this.service = service;
                spans = new SpansResource(service);

            }

            private readonly SpansResource spans;

            /// <summary>Gets the Spans resource.</summary>
            public virtual SpansResource Spans
            {
                get { return spans; }
            }

            /// <summary>The "spans" collection of methods.</summary>
            public class SpansResource
            {
                private const string Resource = "spans";

                /// <summary>The service which this resource belongs to.</summary>
                private readonly Google.Apis.Services.IClientService service;

                /// <summary>Constructs a new resource.</summary>
                public SpansResource(Google.Apis.Services.IClientService service)
                {
                    this.service = service;

                }


                /// <summary>Creates a new Span.</summary>
                /// <param name="body">The body of the request.</param>
                /// <param name="name">The resource name of the span in the following format:
                ///
                ///     projects/[PROJECT_ID]/traces/[TRACE_ID]/spans/SPAN_ID is a unique identifier for a trace within a project.
                /// [SPAN_ID] is a unique identifier for a span within a trace, assigned when the span is created.</param>
                public virtual CreateRequest Create(Google.Apis.CloudTrace.v2.Data.Span body, string name)
                {
                    return new CreateRequest(service, body, name);
                }

                /// <summary>Creates a new Span.</summary>
                public class CreateRequest : CloudTraceBaseServiceRequest<Google.Apis.CloudTrace.v2.Data.Span>
                {
                    /// <summary>Constructs a new Create request.</summary>
                    public CreateRequest(Google.Apis.Services.IClientService service, Google.Apis.CloudTrace.v2.Data.Span body, string name)
                        : base(service)
                    {
                        Name = name;
                        Body = body;
                        InitParameters();
                    }


                    /// <summary>The resource name of the span in the following format:
                    ///
                    /// projects/[PROJECT_ID]/traces/[TRACE_ID]/spans/SPAN_ID is a unique identifier for a trace within
                    /// a project. [SPAN_ID] is a unique identifier for a span within a trace, assigned when the span is
                    /// created.</summary>
                    [Google.Apis.Util.RequestParameterAttribute("name", Google.Apis.Util.RequestParameterType.Path)]
                    public virtual string Name { get; private set; }


                    /// <summary>Gets or sets the body of this request.</summary>
                    Google.Apis.CloudTrace.v2.Data.Span Body { get; set; }

                    ///<summary>Returns the body of the request.</summary>
                    protected override object GetBody() { return Body; }

                    ///<summary>Gets the method name.</summary>
                    public override string MethodName
                    {
                        get { return "create"; }
                    }

                    ///<summary>Gets the HTTP method.</summary>
                    public override string HttpMethod
                    {
                        get { return "PUT"; }
                    }

                    ///<summary>Gets the REST path.</summary>
                    public override string RestPath
                    {
                        get { return "v2/{+name}"; }
                    }

                    /// <summary>Initializes Create parameter list.</summary>
                    protected override void InitParameters()
                    {
                        base.InitParameters();

                        RequestParameters.Add(
                            "name", new Google.Apis.Discovery.Parameter
                            {
                                Name = "name",
                                IsRequired = true,
                                ParameterType = "path",
                                DefaultValue = null,
                                Pattern = @"^projects/[^/]+/traces/[^/]+/spans/[^/]+$",
                            });
                    }

                }
            }

            /// <summary>Sends new spans to Stackdriver Trace or updates existing traces. If the name of a trace that
            /// you send matches that of an existing trace, new spans are added to the existing trace. Attempt to update
            /// existing spans results undefined behavior. If the name does not match, a new trace is created with given
            /// set of spans.</summary>
            /// <param name="body">The body of the request.</param>
            /// <param name="name">Required. Name of the project where the spans belong. The format is
            /// `projects/PROJECT_ID`.</param>
            public virtual BatchWriteRequest BatchWrite(Google.Apis.CloudTrace.v2.Data.BatchWriteSpansRequest body, string name)
            {
                return new BatchWriteRequest(service, body, name);
            }

            /// <summary>Sends new spans to Stackdriver Trace or updates existing traces. If the name of a trace that
            /// you send matches that of an existing trace, new spans are added to the existing trace. Attempt to update
            /// existing spans results undefined behavior. If the name does not match, a new trace is created with given
            /// set of spans.</summary>
            public class BatchWriteRequest : CloudTraceBaseServiceRequest<Google.Apis.CloudTrace.v2.Data.Empty>
            {
                /// <summary>Constructs a new BatchWrite request.</summary>
                public BatchWriteRequest(Google.Apis.Services.IClientService service, Google.Apis.CloudTrace.v2.Data.BatchWriteSpansRequest body, string name)
                    : base(service)
                {
                    Name = name;
                    Body = body;
                    InitParameters();
                }


                /// <summary>Required. Name of the project where the spans belong. The format is
                /// `projects/PROJECT_ID`.</summary>
                [Google.Apis.Util.RequestParameterAttribute("name", Google.Apis.Util.RequestParameterType.Path)]
                public virtual string Name { get; private set; }


                /// <summary>Gets or sets the body of this request.</summary>
                Google.Apis.CloudTrace.v2.Data.BatchWriteSpansRequest Body { get; set; }

                ///<summary>Returns the body of the request.</summary>
                protected override object GetBody() { return Body; }

                ///<summary>Gets the method name.</summary>
                public override string MethodName
                {
                    get { return "batchWrite"; }
                }

                ///<summary>Gets the HTTP method.</summary>
                public override string HttpMethod
                {
                    get { return "POST"; }
                }

                ///<summary>Gets the REST path.</summary>
                public override string RestPath
                {
                    get { return "v2/{+name}/traces:batchWrite"; }
                }

                /// <summary>Initializes BatchWrite parameter list.</summary>
                protected override void InitParameters()
                {
                    base.InitParameters();

                    RequestParameters.Add(
                        "name", new Google.Apis.Discovery.Parameter
                        {
                            Name = "name",
                            IsRequired = true,
                            ParameterType = "path",
                            DefaultValue = null,
                            Pattern = @"^projects/[^/]+$",
                        });
                }

            }
        }
    }
}

namespace Google.Apis.CloudTrace.v2.Data
{    

    /// <summary>Text annotation with a set of attributes.</summary>
    public class Annotation : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>A set of attributes on the annotation. There is a limit of 4 attributes per Annotation.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("attributes")]
        public virtual Attributes Attributes { get; set; } 

        /// <summary>A user-supplied message describing the event. The maximum length for the description is 256
        /// bytes.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("description")]
        public virtual TruncatableString Description { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>The allowed types for [VALUE] in a `[KEY]:[VALUE]` attribute.</summary>
    public class AttributeValue : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>A Boolean value represented by `true` or `false`.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("boolValue")]
        public virtual System.Nullable<bool> BoolValue { get; set; } 

        /// <summary>A 64-bit signed integer.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("intValue")]
        public virtual System.Nullable<long> IntValue { get; set; } 

        /// <summary>A string up to 256 bytes long.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("stringValue")]
        public virtual TruncatableString StringValue { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>A set of attributes, each in the format `[KEY]:[VALUE]`.</summary>
    public class Attributes : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>The set of attributes. Each attribute's key can be up to 128 bytes long. The value can be a string
        /// up to 256 bytes, an integer, or the Boolean values `true` and `false`. For example:
        ///
        /// "/instance_id": "my-instance" "/http/user_agent": "" "/http/request_bytes": 300 "abc.com/myattribute":
        /// true</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("attributeMap")]
        public virtual System.Collections.Generic.IDictionary<string,AttributeValue> AttributeMap { get; set; } 

        /// <summary>The number of attributes that were discarded. Attributes can be discarded because their keys are
        /// too long or because there are too many attributes. If this value is 0 then all attributes are
        /// valid.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("droppedAttributesCount")]
        public virtual System.Nullable<int> DroppedAttributesCount { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>The request message for the `BatchWriteSpans` method.</summary>
    public class BatchWriteSpansRequest : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>A collection of spans.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("spans")]
        public virtual System.Collections.Generic.IList<Span> Spans { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A
    /// typical example is to use it as the request or the response type of an API method. For instance:
    ///
    /// service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
    ///
    /// The JSON representation for `Empty` is empty JSON object `{}`.</summary>
    public class Empty : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>A pointer from the current span to another span in the same trace or in a different trace. For example,
    /// this can be used in batching operations, where a single batch handler processes multiple requests from different
    /// traces or when the handler receives a request from a different project.</summary>
    public class Link : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>A set of attributes on the link. There is a limit of 32 attributes per link.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("attributes")]
        public virtual Attributes Attributes { get; set; } 

        /// <summary>`SPAN_ID` identifies a span within a trace.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("spanId")]
        public virtual string SpanId { get; set; } 

        /// <summary>`TRACE_ID` identifies a trace within a project.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("traceId")]
        public virtual string TraceId { get; set; } 

        /// <summary>The relationship of the current span relative to the linked span.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("type")]
        public virtual string Type { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>A collection of links, which are references from this span to a span in the same or different
    /// trace.</summary>
    public class Links : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>The number of dropped links after the maximum size was enforced. If this value is 0, then no links
        /// were dropped.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("droppedLinksCount")]
        public virtual System.Nullable<int> DroppedLinksCount { get; set; } 

        /// <summary>A collection of links.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("link")]
        public virtual System.Collections.Generic.IList<Link> Link { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>Binary module.</summary>
    public class Module : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>A unique identifier for the module, usually a hash of its contents (up to 128 bytes).</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("buildId")]
        public virtual TruncatableString BuildId { get; set; } 

        /// <summary>For example: main binary, kernel modules, and dynamic libraries such as libc.so, sharedlib.so (up
        /// to 256 bytes).</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("module")]
        public virtual TruncatableString ModuleValue { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>An event describing an RPC message sent or received on the network.</summary>
    public class NetworkEvent : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>The number of compressed bytes sent or received.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("compressedMessageSize")]
        public virtual System.Nullable<ulong> CompressedMessageSize { get; set; } 

        /// <summary>An identifier for the message, which must be unique in this span.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("messageId")]
        public virtual System.Nullable<ulong> MessageId { get; set; } 

        /// <summary>For sent messages, this is the time at which the first bit was sent. For received messages, this is
        /// the time at which the last bit was received.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("time")]
        public virtual object Time { get; set; } 

        /// <summary>Type of NetworkEvent. Indicates whether the RPC message was sent or received.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("type")]
        public virtual string Type { get; set; } 

        /// <summary>The number of uncompressed bytes sent or received.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("uncompressedMessageSize")]
        public virtual System.Nullable<ulong> UncompressedMessageSize { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>A span represents a single operation within a trace. Spans can be nested to form a trace tree. Often, a
    /// trace contains a root span that describes the end-to-end latency, and one or more subspans for its sub-
    /// operations. A trace can also contain multiple root spans, or none at all. Spans do not need to be
    /// contiguousthere may be gaps or overlaps between spans in a trace.</summary>
    public class Span : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>A set of attributes on the span. There is a limit of 32 attributes per span.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("attributes")]
        public virtual Attributes Attributes { get; set; } 

        /// <summary>An optional number of child spans that were generated while this span was active. If set, allows
        /// implementation to detect missing child spans.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("childSpanCount")]
        public virtual System.Nullable<long> ChildSpanCount { get; set; } 

        /// <summary>A description of the span's operation (up to 128 bytes). Stackdriver Trace displays the description
        /// in the {% dynamic print site_values.console_name %}. For example, the display name can be a qualified method
        /// name or a file name and a line number where the operation is called. A best practice is to use the same
        /// display name within an application and at the same call point. This makes it easier to correlate spans in
        /// different traces.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("displayName")]
        public virtual TruncatableString DisplayName { get; set; } 

        /// <summary>The end time of the span. On the client side, this is the time kept by the local machine where the
        /// span execution ends. On the server side, this is the time when the server application handler stops
        /// running.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("endTime")]
        public virtual object EndTime { get; set; } 

        /// <summary>A maximum of 128 links are allowed per Span.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("links")]
        public virtual Links Links { get; set; } 

        /// <summary>The resource name of the span in the following format:
        ///
        /// projects/[PROJECT_ID]/traces/[TRACE_ID]/spans/SPAN_ID is a unique identifier for a trace within a project.
        /// [SPAN_ID] is a unique identifier for a span within a trace, assigned when the span is created.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("name")]
        public virtual string Name { get; set; } 

        /// <summary>The [SPAN_ID] of this span's parent span. If this is a root span, then this field must be
        /// empty.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("parentSpanId")]
        public virtual string ParentSpanId { get; set; } 

        /// <summary>A highly recommended but not required flag that identifies when a trace crosses a process boundary.
        /// True when the parent_span belongs to the same process as the current span.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sameProcessAsParentSpan")]
        public virtual System.Nullable<bool> SameProcessAsParentSpan { get; set; } 

        /// <summary>The [SPAN_ID] portion of the span's resource name.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("spanId")]
        public virtual string SpanId { get; set; } 

        /// <summary>Stack trace captured at the start of the span.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("stackTrace")]
        public virtual StackTrace StackTrace { get; set; } 

        /// <summary>The start time of the span. On the client side, this is the time kept by the local machine where
        /// the span execution starts. On the server side, this is the time when the server's application handler starts
        /// running.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("startTime")]
        public virtual object StartTime { get; set; } 

        /// <summary>An optional final status for this span.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("status")]
        public virtual Status Status { get; set; } 

        /// <summary>The included time events. There can be up to 32 annotations and 128 network events per
        /// span.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("timeEvents")]
        public virtual TimeEvents TimeEvents { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>Represents a single stack frame in a stack trace.</summary>
    public class StackFrame : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>The column number where the function call appears, if available. This is important in JavaScript
        /// because of its anonymous functions.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("columnNumber")]
        public virtual System.Nullable<long> ColumnNumber { get; set; } 

        /// <summary>The name of the source file where the function call appears (up to 256 bytes).</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("fileName")]
        public virtual TruncatableString FileName { get; set; } 

        /// <summary>The fully-qualified name that uniquely identifies the function or method that is active in this
        /// frame (up to 1024 bytes).</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("functionName")]
        public virtual TruncatableString FunctionName { get; set; } 

        /// <summary>The line number in `file_name` where the function call appears.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("lineNumber")]
        public virtual System.Nullable<long> LineNumber { get; set; } 

        /// <summary>The binary module from where the code was loaded.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("loadModule")]
        public virtual Module LoadModule { get; set; } 

        /// <summary>An un-mangled function name, if `function_name` is
        /// [mangled](http://www.avabodh.com/cxxin/namemangling.html). The name can be fully-qualified (up to 1024
        /// bytes).</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("originalFunctionName")]
        public virtual TruncatableString OriginalFunctionName { get; set; } 

        /// <summary>The version of the deployed source code (up to 128 bytes).</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sourceVersion")]
        public virtual TruncatableString SourceVersion { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>A collection of stack frames, which can be truncated.</summary>
    public class StackFrames : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>The number of stack frames that were dropped because there were too many stack frames. If this
        /// value is 0, then no stack frames were dropped.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("droppedFramesCount")]
        public virtual System.Nullable<int> DroppedFramesCount { get; set; } 

        /// <summary>Stack frames in this call stack.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("frame")]
        public virtual System.Collections.Generic.IList<StackFrame> Frame { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>A call stack appearing in a trace.</summary>
    public class StackTrace : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>Stack frames in this stack trace. A maximum of 128 frames are allowed.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("stackFrames")]
        public virtual StackFrames StackFrames { get; set; } 

        /// <summary>The hash ID is used to conserve network bandwidth for duplicate stack traces within a single trace.
        ///
        /// Often multiple spans will have identical stack traces. The first occurrence of a stack trace should contain
        /// both the `stackFrame` content and a value in `stackTraceHashId`.
        ///
        /// Subsequent spans within the same request can refer to that stack trace by only setting
        /// `stackTraceHashId`.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("stackTraceHashId")]
        public virtual System.Nullable<ulong> StackTraceHashId { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>The `Status` type defines a logical error model that is suitable for different programming
    /// environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). The error model
    /// is designed to be:
    ///
    /// - Simple to use and understand for most users - Flexible enough to meet unexpected needs
    ///
    /// # Overview
    ///
    /// The `Status` message contains three pieces of data: error code, error message, and error details. The error code
    /// should be an enum value of google.rpc.Code, but it may accept additional error codes if needed.  The error
    /// message should be a developer-facing English message that helps developers *understand* and *resolve* the error.
    /// If a localized user-facing error message is needed, put the localized message in the error details or localize
    /// it in the client. The optional error details may contain arbitrary information about the error. There is a
    /// predefined set of error detail types in the package `google.rpc` that can be used for common error conditions.
    ///
    /// # Language mapping
    ///
    /// The `Status` message is the logical representation of the error model, but it is not necessarily the actual wire
    /// format. When the `Status` message is exposed in different client libraries and different wire protocols, it can
    /// be mapped differently. For example, it will likely be mapped to some exceptions in Java, but more likely mapped
    /// to some error codes in C.
    ///
    /// # Other uses
    ///
    /// The error model and the `Status` message can be used in a variety of environments, either with or without APIs,
    /// to provide a consistent developer experience across different environments.
    ///
    /// Example uses of this error model include:
    ///
    /// - Partial errors. If a service needs to return partial errors to the client, it may embed the `Status` in the
    /// normal response to indicate the partial errors.
    ///
    /// - Workflow errors. A typical workflow has multiple steps. Each step may have a `Status` message for error
    /// reporting.
    ///
    /// - Batch operations. If a client uses batch request and batch response, the `Status` message should be used
    /// directly inside batch response, one for each error sub-response.
    ///
    /// - Asynchronous operations. If an API call embeds asynchronous operation results in its response, the status of
    /// those operations should be represented directly using the `Status` message.
    ///
    /// - Logging. If some API errors are stored in logs, the message `Status` could be used directly after any
    /// stripping needed for security/privacy reasons.</summary>
    public class Status : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>The status code, which should be an enum value of google.rpc.Code.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("code")]
        public virtual System.Nullable<int> Code { get; set; } 

        /// <summary>A list of messages that carry the error details.  There is a common set of message types for APIs
        /// to use.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("details")]
        public virtual System.Collections.Generic.IList<System.Collections.Generic.IDictionary<string,object>> Details { get; set; } 

        /// <summary>A developer-facing error message, which should be in English. Any user-facing error message should
        /// be localized and sent in the google.rpc.Status.details field, or localized by the client.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("message")]
        public virtual string Message { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>A time-stamped annotation or network event in the Span.</summary>
    public class TimeEvent : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>Text annotation with a set of attributes.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("annotation")]
        public virtual Annotation Annotation { get; set; } 

        /// <summary>An event describing an RPC message sent/received on the network.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("networkEvent")]
        public virtual NetworkEvent NetworkEvent { get; set; } 

        /// <summary>The timestamp indicating the time the event occurred.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("time")]
        public virtual object Time { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>A collection of `TimeEvent`s. A `TimeEvent` is a time-stamped annotation on the span, consisting of
    /// either user-supplied key:value pairs, or details of an RPC message sent/received on the network.</summary>
    public class TimeEvents : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>The number of dropped annotations in all the included time events. If the value is 0, then no
        /// annotations were dropped.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("droppedAnnotationsCount")]
        public virtual System.Nullable<int> DroppedAnnotationsCount { get; set; } 

        /// <summary>The number of dropped network events in all the included time events. If the value is 0, then no
        /// network events were dropped.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("droppedNetworkEventsCount")]
        public virtual System.Nullable<int> DroppedNetworkEventsCount { get; set; } 

        /// <summary>A collection of `TimeEvent`s.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("timeEvent")]
        public virtual System.Collections.Generic.IList<TimeEvent> TimeEvent { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>Represents a string that might be shortened to a specified length.</summary>
    public class TruncatableString : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>The number of bytes removed from the original string. If this value is 0, then the string was not
        /// shortened.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("truncatedByteCount")]
        public virtual System.Nullable<int> TruncatedByteCount { get; set; } 

        /// <summary>The shortened string. For example, if the original string was 500 bytes long and the limit of the
        /// string was 128 bytes, then this value contains the first 128 bytes of the 500-byte string. Note that
        /// truncation always happens on the character boundary, to ensure that truncated string is still valid UTF8. In
        /// case of multi-byte characters, size of truncated string can be less than truncation limit.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("value")]
        public virtual string Value { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }
}
