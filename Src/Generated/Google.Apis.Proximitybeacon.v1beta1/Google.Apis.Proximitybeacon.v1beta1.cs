// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by google-apis-code-generator 1.5.1
//     C# generator version: 1.10.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

/**
 * \brief
 *   Google Proximity Beacon API Version v1beta1
 *
 * \section ApiInfo API Version Information
 *    <table>
 *      <tr><th>API
 *          <td><a href='https://developers.google.com/beacons/proximity/'>Google Proximity Beacon API</a>
 *      <tr><th>API Version<td>v1beta1
 *      <tr><th>API Rev<td>20150729 (209)
 *      <tr><th>API Docs
 *          <td><a href='https://developers.google.com/beacons/proximity/'>
 *              https://developers.google.com/beacons/proximity/</a>
 *      <tr><th>Discovery Name<td>proximitybeacon
 *    </table>
 *
 * \section ForMoreInfo For More Information
 *
 * The complete API documentation for using Google Proximity Beacon API can be found at
 * <a href='https://developers.google.com/beacons/proximity/'>https://developers.google.com/beacons/proximity/</a>.
 *
 * For more information about the Google APIs Client Library for .NET, see
 * <a href='https://developers.google.com/api-client-library/dotnet/get_started'>
 * https://developers.google.com/api-client-library/dotnet/get_started</a>
 */

namespace Google.Apis.Proximitybeacon.v1beta1
{
    /// <summary>The Proximitybeacon Service.</summary>
    public class ProximitybeaconService : Google.Apis.Services.BaseClientService
    {
        /// <summary>The API version.</summary>
        public const string Version = "v1beta1";

        /// <summary>The discovery version used to generate this service.</summary>
        public static Google.Apis.Discovery.DiscoveryVersion DiscoveryVersionUsed =
            Google.Apis.Discovery.DiscoveryVersion.Version_1_0;

        /// <summary>Constructs a new service.</summary>
        public ProximitybeaconService() :
            this(new Google.Apis.Services.BaseClientService.Initializer()) {}

        /// <summary>Constructs a new service.</summary>
        /// <param name="initializer">The service initializer.</param>
        public ProximitybeaconService(Google.Apis.Services.BaseClientService.Initializer initializer)
            : base(initializer)
        {
            beaconinfo = new BeaconinfoResource(this);
            beacons = new BeaconsResource(this);
            namespaces = new NamespacesResource(this);
        }

        /// <summary>Gets the service supported features.</summary>
        public override System.Collections.Generic.IList<string> Features
        {
            get { return new string[0]; }
        }

        /// <summary>Gets the service name.</summary>
        public override string Name
        {
            get { return "proximitybeacon"; }
        }

        /// <summary>Gets the service base URI.</summary>
        public override string BaseUri
        {
            get { return "https://proximitybeacon.googleapis.com/"; }
        }

        /// <summary>Gets the service base path.</summary>
        public override string BasePath
        {
            get { return ""; }
        }





        private readonly BeaconinfoResource beaconinfo;

        /// <summary>Gets the Beaconinfo resource.</summary>
        public virtual BeaconinfoResource Beaconinfo
        {
            get { return beaconinfo; }
        }

        private readonly BeaconsResource beacons;

        /// <summary>Gets the Beacons resource.</summary>
        public virtual BeaconsResource Beacons
        {
            get { return beacons; }
        }

        private readonly NamespacesResource namespaces;

        /// <summary>Gets the Namespaces resource.</summary>
        public virtual NamespacesResource Namespaces
        {
            get { return namespaces; }
        }
    }

    ///<summary>A base abstract class for Proximitybeacon requests.</summary>
    public abstract class ProximitybeaconBaseServiceRequest<TResponse> : Google.Apis.Requests.ClientServiceRequest<TResponse>
    {
        ///<summary>Constructs a new ProximitybeaconBaseServiceRequest instance.</summary>
        protected ProximitybeaconBaseServiceRequest(Google.Apis.Services.IClientService service)
            : base(service)
        {
        }

        /// <summary>V1 error format.</summary>
        [Google.Apis.Util.RequestParameterAttribute("$.xgafv", Google.Apis.Util.RequestParameterType.Query)]
        public virtual string Xgafv { get; set; }

        /// <summary>OAuth access token.</summary>
        [Google.Apis.Util.RequestParameterAttribute("access_token", Google.Apis.Util.RequestParameterType.Query)]
        public virtual string AccessToken { get; set; }

        /// <summary>Data format for response.</summary>
        /// [default: json]
        [Google.Apis.Util.RequestParameterAttribute("alt", Google.Apis.Util.RequestParameterType.Query)]
        public virtual string Alt { get; set; }

        /// <summary>OAuth bearer token.</summary>
        [Google.Apis.Util.RequestParameterAttribute("bearer_token", Google.Apis.Util.RequestParameterType.Query)]
        public virtual string BearerToken { get; set; }

        /// <summary>JSONP</summary>
        [Google.Apis.Util.RequestParameterAttribute("callback", Google.Apis.Util.RequestParameterType.Query)]
        public virtual string Callback { get; set; }

        /// <summary>Selector specifying which fields to include in a partial response.</summary>
        [Google.Apis.Util.RequestParameterAttribute("fields", Google.Apis.Util.RequestParameterType.Query)]
        public virtual string Fields { get; set; }

        /// <summary>API key. Your API key identifies your project and provides you with API access, quota, and reports.
        /// Required unless you provide an OAuth 2.0 token.</summary>
        [Google.Apis.Util.RequestParameterAttribute("key", Google.Apis.Util.RequestParameterType.Query)]
        public virtual string Key { get; set; }

        /// <summary>OAuth 2.0 token for the current user.</summary>
        [Google.Apis.Util.RequestParameterAttribute("oauth_token", Google.Apis.Util.RequestParameterType.Query)]
        public virtual string OauthToken { get; set; }

        /// <summary>Pretty-print response.</summary>
        /// [default: true]
        [Google.Apis.Util.RequestParameterAttribute("pp", Google.Apis.Util.RequestParameterType.Query)]
        public virtual System.Nullable<bool> Pp { get; set; }

        /// <summary>Returns response with indentations and line breaks.</summary>
        /// [default: true]
        [Google.Apis.Util.RequestParameterAttribute("prettyPrint", Google.Apis.Util.RequestParameterType.Query)]
        public virtual System.Nullable<bool> PrettyPrint { get; set; }

        /// <summary>Available to use for quota purposes for server-side applications. Can be any arbitrary string
        /// assigned to a user, but should not exceed 40 characters.</summary>
        [Google.Apis.Util.RequestParameterAttribute("quotaUser", Google.Apis.Util.RequestParameterType.Query)]
        public virtual string QuotaUser { get; set; }

        /// <summary>Legacy upload protocol for media (e.g. "media", "multipart").</summary>
        [Google.Apis.Util.RequestParameterAttribute("uploadType", Google.Apis.Util.RequestParameterType.Query)]
        public virtual string UploadType { get; set; }

        /// <summary>Upload protocol for media (e.g. "raw", "multipart").</summary>
        [Google.Apis.Util.RequestParameterAttribute("upload_protocol", Google.Apis.Util.RequestParameterType.Query)]
        public virtual string UploadProtocol { get; set; }

        /// <summary>Initializes Proximitybeacon parameter list.</summary>
        protected override void InitParameters()
        {
            base.InitParameters();

            RequestParameters.Add(
                "$.xgafv", new Google.Apis.Discovery.Parameter
                {
                    Name = "$.xgafv",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = null,
                    Pattern = null,
                });
            RequestParameters.Add(
                "access_token", new Google.Apis.Discovery.Parameter
                {
                    Name = "access_token",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = null,
                    Pattern = null,
                });
            RequestParameters.Add(
                "alt", new Google.Apis.Discovery.Parameter
                {
                    Name = "alt",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = "json",
                    Pattern = null,
                });
            RequestParameters.Add(
                "bearer_token", new Google.Apis.Discovery.Parameter
                {
                    Name = "bearer_token",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = null,
                    Pattern = null,
                });
            RequestParameters.Add(
                "callback", new Google.Apis.Discovery.Parameter
                {
                    Name = "callback",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = null,
                    Pattern = null,
                });
            RequestParameters.Add(
                "fields", new Google.Apis.Discovery.Parameter
                {
                    Name = "fields",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = null,
                    Pattern = null,
                });
            RequestParameters.Add(
                "key", new Google.Apis.Discovery.Parameter
                {
                    Name = "key",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = null,
                    Pattern = null,
                });
            RequestParameters.Add(
                "oauth_token", new Google.Apis.Discovery.Parameter
                {
                    Name = "oauth_token",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = null,
                    Pattern = null,
                });
            RequestParameters.Add(
                "pp", new Google.Apis.Discovery.Parameter
                {
                    Name = "pp",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = "true",
                    Pattern = null,
                });
            RequestParameters.Add(
                "prettyPrint", new Google.Apis.Discovery.Parameter
                {
                    Name = "prettyPrint",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = "true",
                    Pattern = null,
                });
            RequestParameters.Add(
                "quotaUser", new Google.Apis.Discovery.Parameter
                {
                    Name = "quotaUser",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = null,
                    Pattern = null,
                });
            RequestParameters.Add(
                "uploadType", new Google.Apis.Discovery.Parameter
                {
                    Name = "uploadType",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = null,
                    Pattern = null,
                });
            RequestParameters.Add(
                "upload_protocol", new Google.Apis.Discovery.Parameter
                {
                    Name = "upload_protocol",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = null,
                    Pattern = null,
                });
        }
    }

    /// <summary>The "beaconinfo" collection of methods.</summary>
    public class BeaconinfoResource
    {
        private const string Resource = "beaconinfo";

        /// <summary>The service which this resource belongs to.</summary>
        private readonly Google.Apis.Services.IClientService service;

        /// <summary>Constructs a new resource.</summary>
        public BeaconinfoResource(Google.Apis.Services.IClientService service)
        {
            this.service = service;

        }


        /// <summary>Given one or more beacon observations, returns any beacon information and attachments accessible to
        /// your application.</summary>
        /// <param name="body">The body of the request.</param>
        public virtual GetforobservedRequest Getforobserved(Google.Apis.Proximitybeacon.v1beta1.Data.GetInfoForObservedBeaconsRequest body)
        {
            return new GetforobservedRequest(service, body);
        }

        /// <summary>Given one or more beacon observations, returns any beacon information and attachments accessible to
        /// your application.</summary>
        public class GetforobservedRequest : ProximitybeaconBaseServiceRequest<Google.Apis.Proximitybeacon.v1beta1.Data.GetInfoForObservedBeaconsResponse>
        {
            /// <summary>Constructs a new Getforobserved request.</summary>
            public GetforobservedRequest(Google.Apis.Services.IClientService service, Google.Apis.Proximitybeacon.v1beta1.Data.GetInfoForObservedBeaconsRequest body)
                : base(service)
            {
                Body = body;
                InitParameters();
            }



            /// <summary>Gets or sets the body of this request.</summary>
            Google.Apis.Proximitybeacon.v1beta1.Data.GetInfoForObservedBeaconsRequest Body { get; set; }

            ///<summary>Returns the body of the request.</summary>
            protected override object GetBody() { return Body; }

            ///<summary>Gets the method name.</summary>
            public override string MethodName
            {
                get { return "getforobserved"; }
            }

            ///<summary>Gets the HTTP method.</summary>
            public override string HttpMethod
            {
                get { return "POST"; }
            }

            ///<summary>Gets the REST path.</summary>
            public override string RestPath
            {
                get { return "v1beta1/beaconinfo:getforobserved"; }
            }

            /// <summary>Initializes Getforobserved parameter list.</summary>
            protected override void InitParameters()
            {
                base.InitParameters();

            }

        }
    }

    /// <summary>The "beacons" collection of methods.</summary>
    public class BeaconsResource
    {
        private const string Resource = "beacons";

        /// <summary>The service which this resource belongs to.</summary>
        private readonly Google.Apis.Services.IClientService service;

        /// <summary>Constructs a new resource.</summary>
        public BeaconsResource(Google.Apis.Services.IClientService service)
        {
            this.service = service;
            attachments = new AttachmentsResource(service);
            diagnostics = new DiagnosticsResource(service);

        }

        private readonly AttachmentsResource attachments;

        /// <summary>Gets the Attachments resource.</summary>
        public virtual AttachmentsResource Attachments
        {
            get { return attachments; }
        }

        /// <summary>The "attachments" collection of methods.</summary>
        public class AttachmentsResource
        {
            private const string Resource = "attachments";

            /// <summary>The service which this resource belongs to.</summary>
            private readonly Google.Apis.Services.IClientService service;

            /// <summary>Constructs a new resource.</summary>
            public AttachmentsResource(Google.Apis.Services.IClientService service)
            {
                this.service = service;

            }


            /// <summary>Deletes multiple attachments on a given beacon. This operation is permanent and cannot be
            /// undone. You can optionally specify `namespacedType` to choose which attachments should be deleted. If
            /// you do not specify `namespacedType`, all your attachments on the given beacon will be deleted. You also
            /// may explicitly specify `*` to delete all.</summary>
            /// <param name="beaconName">The beacon whose attachments are to be deleted. Required.</param>
            public virtual BatchDeleteRequest BatchDelete(string beaconName)
            {
                return new BatchDeleteRequest(service, beaconName);
            }

            /// <summary>Deletes multiple attachments on a given beacon. This operation is permanent and cannot be
            /// undone. You can optionally specify `namespacedType` to choose which attachments should be deleted. If
            /// you do not specify `namespacedType`, all your attachments on the given beacon will be deleted. You also
            /// may explicitly specify `*` to delete all.</summary>
            public class BatchDeleteRequest : ProximitybeaconBaseServiceRequest<Google.Apis.Proximitybeacon.v1beta1.Data.DeleteAttachmentsResponse>
            {
                /// <summary>Constructs a new BatchDelete request.</summary>
                public BatchDeleteRequest(Google.Apis.Services.IClientService service, string beaconName)
                    : base(service)
                {
                    BeaconName = beaconName;
                    InitParameters();
                }


                /// <summary>The beacon whose attachments are to be deleted. Required.</summary>
                [Google.Apis.Util.RequestParameterAttribute("beaconName", Google.Apis.Util.RequestParameterType.Path)]
                public virtual string BeaconName { get; private set; }

                /// <summary>Specifies the namespace and type of attachments to delete in `namespace/type` format.
                /// Accepts `*` to specify "all types in all namespaces". Optional.</summary>
                [Google.Apis.Util.RequestParameterAttribute("namespacedType", Google.Apis.Util.RequestParameterType.Query)]
                public virtual string NamespacedType { get; set; }


                ///<summary>Gets the method name.</summary>
                public override string MethodName
                {
                    get { return "batchDelete"; }
                }

                ///<summary>Gets the HTTP method.</summary>
                public override string HttpMethod
                {
                    get { return "POST"; }
                }

                ///<summary>Gets the REST path.</summary>
                public override string RestPath
                {
                    get { return "v1beta1/{+beaconName}/attachments:batchDelete"; }
                }

                /// <summary>Initializes BatchDelete parameter list.</summary>
                protected override void InitParameters()
                {
                    base.InitParameters();

                    RequestParameters.Add(
                        "beaconName", new Google.Apis.Discovery.Parameter
                        {
                            Name = "beaconName",
                            IsRequired = true,
                            ParameterType = "path",
                            DefaultValue = null,
                            Pattern = @"^beacons/[^/]*$",
                        });
                    RequestParameters.Add(
                        "namespacedType", new Google.Apis.Discovery.Parameter
                        {
                            Name = "namespacedType",
                            IsRequired = false,
                            ParameterType = "query",
                            DefaultValue = null,
                            Pattern = null,
                        });
                }

            }

            /// <summary>Associates the given data with the specified beacon. Attachment data must contain two parts: -
            /// A namespaced type. - The actual attachment data itself.  The namespaced type consists of two parts, the
            /// namespace and the type. The namespace must be one of the values returned by the `namespaces` endpoint,
            /// while the type can be a string of any characters except for the forward slash (`/`) up to 100 characters
            /// in length. Attachment data can be up to 1024 bytes long.</summary>
            /// <param name="body">The body of the request.</param>
            /// <param name="beaconName">The beacon on which the attachment should be created. Required.</param>
            public virtual CreateRequest Create(Google.Apis.Proximitybeacon.v1beta1.Data.BeaconAttachment body, string beaconName)
            {
                return new CreateRequest(service, body, beaconName);
            }

            /// <summary>Associates the given data with the specified beacon. Attachment data must contain two parts: -
            /// A namespaced type. - The actual attachment data itself.  The namespaced type consists of two parts, the
            /// namespace and the type. The namespace must be one of the values returned by the `namespaces` endpoint,
            /// while the type can be a string of any characters except for the forward slash (`/`) up to 100 characters
            /// in length. Attachment data can be up to 1024 bytes long.</summary>
            public class CreateRequest : ProximitybeaconBaseServiceRequest<Google.Apis.Proximitybeacon.v1beta1.Data.BeaconAttachment>
            {
                /// <summary>Constructs a new Create request.</summary>
                public CreateRequest(Google.Apis.Services.IClientService service, Google.Apis.Proximitybeacon.v1beta1.Data.BeaconAttachment body, string beaconName)
                    : base(service)
                {
                    BeaconName = beaconName;
                    Body = body;
                    InitParameters();
                }


                /// <summary>The beacon on which the attachment should be created. Required.</summary>
                [Google.Apis.Util.RequestParameterAttribute("beaconName", Google.Apis.Util.RequestParameterType.Path)]
                public virtual string BeaconName { get; private set; }


                /// <summary>Gets or sets the body of this request.</summary>
                Google.Apis.Proximitybeacon.v1beta1.Data.BeaconAttachment Body { get; set; }

                ///<summary>Returns the body of the request.</summary>
                protected override object GetBody() { return Body; }

                ///<summary>Gets the method name.</summary>
                public override string MethodName
                {
                    get { return "create"; }
                }

                ///<summary>Gets the HTTP method.</summary>
                public override string HttpMethod
                {
                    get { return "POST"; }
                }

                ///<summary>Gets the REST path.</summary>
                public override string RestPath
                {
                    get { return "v1beta1/{+beaconName}/attachments"; }
                }

                /// <summary>Initializes Create parameter list.</summary>
                protected override void InitParameters()
                {
                    base.InitParameters();

                    RequestParameters.Add(
                        "beaconName", new Google.Apis.Discovery.Parameter
                        {
                            Name = "beaconName",
                            IsRequired = true,
                            ParameterType = "path",
                            DefaultValue = null,
                            Pattern = @"^beacons/[^/]*$",
                        });
                }

            }

            /// <summary>Deletes the specified attachment for the given beacon. Each attachment has a unique attachment
            /// name (`attachmentName`) which is returned when you fetch the attachment data via this API. You specify
            /// this with the delete request to control which attachment is removed. This operation cannot be
            /// undone.</summary>
            /// <param name="attachmentName">The attachment name (`attachmentName`) of the attachment to remove. For example:
            /// `beacons/3!893737abc9/attachments/c5e937-af0-494-959-ec49d12738` Required.</param>
            public virtual DeleteRequest Delete(string attachmentName)
            {
                return new DeleteRequest(service, attachmentName);
            }

            /// <summary>Deletes the specified attachment for the given beacon. Each attachment has a unique attachment
            /// name (`attachmentName`) which is returned when you fetch the attachment data via this API. You specify
            /// this with the delete request to control which attachment is removed. This operation cannot be
            /// undone.</summary>
            public class DeleteRequest : ProximitybeaconBaseServiceRequest<Google.Apis.Proximitybeacon.v1beta1.Data.Empty>
            {
                /// <summary>Constructs a new Delete request.</summary>
                public DeleteRequest(Google.Apis.Services.IClientService service, string attachmentName)
                    : base(service)
                {
                    AttachmentName = attachmentName;
                    InitParameters();
                }


                /// <summary>The attachment name (`attachmentName`) of the attachment to remove. For example:
                /// `beacons/3!893737abc9/attachments/c5e937-af0-494-959-ec49d12738` Required.</summary>
                [Google.Apis.Util.RequestParameterAttribute("attachmentName", Google.Apis.Util.RequestParameterType.Path)]
                public virtual string AttachmentName { get; private set; }


                ///<summary>Gets the method name.</summary>
                public override string MethodName
                {
                    get { return "delete"; }
                }

                ///<summary>Gets the HTTP method.</summary>
                public override string HttpMethod
                {
                    get { return "DELETE"; }
                }

                ///<summary>Gets the REST path.</summary>
                public override string RestPath
                {
                    get { return "v1beta1/{+attachmentName}"; }
                }

                /// <summary>Initializes Delete parameter list.</summary>
                protected override void InitParameters()
                {
                    base.InitParameters();

                    RequestParameters.Add(
                        "attachmentName", new Google.Apis.Discovery.Parameter
                        {
                            Name = "attachmentName",
                            IsRequired = true,
                            ParameterType = "path",
                            DefaultValue = null,
                            Pattern = @"^beacons/[^/]*/attachments/[^/]*$",
                        });
                }

            }

            /// <summary>Returns the attachments for the specified beacon that match the specified namespaced-type
            /// pattern. To control which namespaced types are returned, you add the `namespacedType` query parameter to
            /// the request. You must either use `*`, to return all attachments, or the namespace must be one of the
            /// ones returned from the `namespaces` endpoint.</summary>
            /// <param name="beaconName">The beacon whose attachments are to be fetched. Required.</param>
            public virtual ListRequest List(string beaconName)
            {
                return new ListRequest(service, beaconName);
            }

            /// <summary>Returns the attachments for the specified beacon that match the specified namespaced-type
            /// pattern. To control which namespaced types are returned, you add the `namespacedType` query parameter to
            /// the request. You must either use `*`, to return all attachments, or the namespace must be one of the
            /// ones returned from the `namespaces` endpoint.</summary>
            public class ListRequest : ProximitybeaconBaseServiceRequest<Google.Apis.Proximitybeacon.v1beta1.Data.ListBeaconAttachmentsResponse>
            {
                /// <summary>Constructs a new List request.</summary>
                public ListRequest(Google.Apis.Services.IClientService service, string beaconName)
                    : base(service)
                {
                    BeaconName = beaconName;
                    InitParameters();
                }


                /// <summary>The beacon whose attachments are to be fetched. Required.</summary>
                [Google.Apis.Util.RequestParameterAttribute("beaconName", Google.Apis.Util.RequestParameterType.Path)]
                public virtual string BeaconName { get; private set; }

                /// <summary>Specifies the namespace and type of attachment to include in response in namespace/type
                /// format. Accepts `*` to specify "all types in all namespaces".</summary>
                [Google.Apis.Util.RequestParameterAttribute("namespacedType", Google.Apis.Util.RequestParameterType.Query)]
                public virtual string NamespacedType { get; set; }


                ///<summary>Gets the method name.</summary>
                public override string MethodName
                {
                    get { return "list"; }
                }

                ///<summary>Gets the HTTP method.</summary>
                public override string HttpMethod
                {
                    get { return "GET"; }
                }

                ///<summary>Gets the REST path.</summary>
                public override string RestPath
                {
                    get { return "v1beta1/{+beaconName}/attachments"; }
                }

                /// <summary>Initializes List parameter list.</summary>
                protected override void InitParameters()
                {
                    base.InitParameters();

                    RequestParameters.Add(
                        "beaconName", new Google.Apis.Discovery.Parameter
                        {
                            Name = "beaconName",
                            IsRequired = true,
                            ParameterType = "path",
                            DefaultValue = null,
                            Pattern = @"^beacons/[^/]*$",
                        });
                    RequestParameters.Add(
                        "namespacedType", new Google.Apis.Discovery.Parameter
                        {
                            Name = "namespacedType",
                            IsRequired = false,
                            ParameterType = "query",
                            DefaultValue = null,
                            Pattern = null,
                        });
                }

            }
        }
        private readonly DiagnosticsResource diagnostics;

        /// <summary>Gets the Diagnostics resource.</summary>
        public virtual DiagnosticsResource Diagnostics
        {
            get { return diagnostics; }
        }

        /// <summary>The "diagnostics" collection of methods.</summary>
        public class DiagnosticsResource
        {
            private const string Resource = "diagnostics";

            /// <summary>The service which this resource belongs to.</summary>
            private readonly Google.Apis.Services.IClientService service;

            /// <summary>Constructs a new resource.</summary>
            public DiagnosticsResource(Google.Apis.Services.IClientService service)
            {
                this.service = service;

            }


            /// <summary>List the diagnostics for a single beacon. You can also list diagnostics for all the beacons
            /// owned by your Google Developers Console project by using the beacon name `beacons/-`.</summary>
            /// <param name="beaconName">Beacon that the diagnostics are for.</param>
            public virtual ListRequest List(string beaconName)
            {
                return new ListRequest(service, beaconName);
            }

            /// <summary>List the diagnostics for a single beacon. You can also list diagnostics for all the beacons
            /// owned by your Google Developers Console project by using the beacon name `beacons/-`.</summary>
            public class ListRequest : ProximitybeaconBaseServiceRequest<Google.Apis.Proximitybeacon.v1beta1.Data.ListDiagnosticsResponse>
            {
                /// <summary>Constructs a new List request.</summary>
                public ListRequest(Google.Apis.Services.IClientService service, string beaconName)
                    : base(service)
                {
                    BeaconName = beaconName;
                    InitParameters();
                }


                /// <summary>Beacon that the diagnostics are for.</summary>
                [Google.Apis.Util.RequestParameterAttribute("beaconName", Google.Apis.Util.RequestParameterType.Path)]
                public virtual string BeaconName { get; private set; }

                /// <summary>Specifies the maximum number of results to return. Defaults to 10. Maximum 1000.
                /// Optional.</summary>
                [Google.Apis.Util.RequestParameterAttribute("pageSize", Google.Apis.Util.RequestParameterType.Query)]
                public virtual System.Nullable<int> PageSize { get; set; }

                /// <summary>Requests results that occur after the `page_token`, obtained from the response to a
                /// previous request. Optional.</summary>
                [Google.Apis.Util.RequestParameterAttribute("pageToken", Google.Apis.Util.RequestParameterType.Query)]
                public virtual string PageToken { get; set; }

                /// <summary>Requests only beacons that have the given alert. For example, to find beacons that have low
                /// batteries use `alert_filter=LOW_BATTERY`.</summary>
                [Google.Apis.Util.RequestParameterAttribute("alertFilter", Google.Apis.Util.RequestParameterType.Query)]
                public virtual System.Nullable<AlertFilterEnum> AlertFilter { get; set; }

                /// <summary>Requests only beacons that have the given alert. For example, to find beacons that have low
                /// batteries use `alert_filter=LOW_BATTERY`.</summary>
                public enum AlertFilterEnum
                {
                    [Google.Apis.Util.StringValueAttribute("ALERT_UNSPECIFIED")]
                    ALERTUNSPECIFIED,
                    [Google.Apis.Util.StringValueAttribute("WRONG_LOCATION")]
                    WRONGLOCATION,
                    [Google.Apis.Util.StringValueAttribute("LOW_BATTERY")]
                    LOWBATTERY,
                }


                ///<summary>Gets the method name.</summary>
                public override string MethodName
                {
                    get { return "list"; }
                }

                ///<summary>Gets the HTTP method.</summary>
                public override string HttpMethod
                {
                    get { return "GET"; }
                }

                ///<summary>Gets the REST path.</summary>
                public override string RestPath
                {
                    get { return "v1beta1/{+beaconName}/diagnostics"; }
                }

                /// <summary>Initializes List parameter list.</summary>
                protected override void InitParameters()
                {
                    base.InitParameters();

                    RequestParameters.Add(
                        "beaconName", new Google.Apis.Discovery.Parameter
                        {
                            Name = "beaconName",
                            IsRequired = true,
                            ParameterType = "path",
                            DefaultValue = null,
                            Pattern = @"^beacons/[^/]*$",
                        });
                    RequestParameters.Add(
                        "pageSize", new Google.Apis.Discovery.Parameter
                        {
                            Name = "pageSize",
                            IsRequired = false,
                            ParameterType = "query",
                            DefaultValue = null,
                            Pattern = null,
                        });
                    RequestParameters.Add(
                        "pageToken", new Google.Apis.Discovery.Parameter
                        {
                            Name = "pageToken",
                            IsRequired = false,
                            ParameterType = "query",
                            DefaultValue = null,
                            Pattern = null,
                        });
                    RequestParameters.Add(
                        "alertFilter", new Google.Apis.Discovery.Parameter
                        {
                            Name = "alertFilter",
                            IsRequired = false,
                            ParameterType = "query",
                            DefaultValue = null,
                            Pattern = null,
                        });
                }

            }
        }

        /// <summary>(Re)activates a beacon. A beacon that is active will return information and attachment data when
        /// queried via `beaconinfo.getforobserved`. Calling this method on an already active beacon will do nothing
        /// (but will return a successful response code).</summary>
        /// <param name="beaconName">The beacon to activate. Required.</param>
        public virtual ActivateRequest Activate(string beaconName)
        {
            return new ActivateRequest(service, beaconName);
        }

        /// <summary>(Re)activates a beacon. A beacon that is active will return information and attachment data when
        /// queried via `beaconinfo.getforobserved`. Calling this method on an already active beacon will do nothing
        /// (but will return a successful response code).</summary>
        public class ActivateRequest : ProximitybeaconBaseServiceRequest<Google.Apis.Proximitybeacon.v1beta1.Data.Empty>
        {
            /// <summary>Constructs a new Activate request.</summary>
            public ActivateRequest(Google.Apis.Services.IClientService service, string beaconName)
                : base(service)
            {
                BeaconName = beaconName;
                InitParameters();
            }


            /// <summary>The beacon to activate. Required.</summary>
            [Google.Apis.Util.RequestParameterAttribute("beaconName", Google.Apis.Util.RequestParameterType.Path)]
            public virtual string BeaconName { get; private set; }


            ///<summary>Gets the method name.</summary>
            public override string MethodName
            {
                get { return "activate"; }
            }

            ///<summary>Gets the HTTP method.</summary>
            public override string HttpMethod
            {
                get { return "POST"; }
            }

            ///<summary>Gets the REST path.</summary>
            public override string RestPath
            {
                get { return "v1beta1/{+beaconName}:activate"; }
            }

            /// <summary>Initializes Activate parameter list.</summary>
            protected override void InitParameters()
            {
                base.InitParameters();

                RequestParameters.Add(
                    "beaconName", new Google.Apis.Discovery.Parameter
                    {
                        Name = "beaconName",
                        IsRequired = true,
                        ParameterType = "path",
                        DefaultValue = null,
                        Pattern = @"^beacons/[^/]*$",
                    });
            }

        }

        /// <summary>Deactivates a beacon. Once deactivated, the API will not return information nor attachment data for
        /// the beacon when queried via `beaconinfo.getforobserved`. Calling this method on an already inactive beacon
        /// will do nothing (but will return a successful response code).</summary>
        /// <param name="beaconName">The beacon name of this beacon.</param>
        public virtual DeactivateRequest Deactivate(string beaconName)
        {
            return new DeactivateRequest(service, beaconName);
        }

        /// <summary>Deactivates a beacon. Once deactivated, the API will not return information nor attachment data for
        /// the beacon when queried via `beaconinfo.getforobserved`. Calling this method on an already inactive beacon
        /// will do nothing (but will return a successful response code).</summary>
        public class DeactivateRequest : ProximitybeaconBaseServiceRequest<Google.Apis.Proximitybeacon.v1beta1.Data.Empty>
        {
            /// <summary>Constructs a new Deactivate request.</summary>
            public DeactivateRequest(Google.Apis.Services.IClientService service, string beaconName)
                : base(service)
            {
                BeaconName = beaconName;
                InitParameters();
            }


            /// <summary>The beacon name of this beacon.</summary>
            [Google.Apis.Util.RequestParameterAttribute("beaconName", Google.Apis.Util.RequestParameterType.Path)]
            public virtual string BeaconName { get; private set; }


            ///<summary>Gets the method name.</summary>
            public override string MethodName
            {
                get { return "deactivate"; }
            }

            ///<summary>Gets the HTTP method.</summary>
            public override string HttpMethod
            {
                get { return "POST"; }
            }

            ///<summary>Gets the REST path.</summary>
            public override string RestPath
            {
                get { return "v1beta1/{+beaconName}:deactivate"; }
            }

            /// <summary>Initializes Deactivate parameter list.</summary>
            protected override void InitParameters()
            {
                base.InitParameters();

                RequestParameters.Add(
                    "beaconName", new Google.Apis.Discovery.Parameter
                    {
                        Name = "beaconName",
                        IsRequired = true,
                        ParameterType = "path",
                        DefaultValue = null,
                        Pattern = @"^beacons/[^/]*$",
                    });
            }

        }

        /// <summary>Decommissions the specified beacon in the service. This beacon will no longer be returned from
        /// `beaconinfo.getforobserved`. This operation is permanent -- you will not be able to re-register a beacon
        /// with this ID again.</summary>
        /// <param name="beaconName">Beacon that should be decommissioned. Required.</param>
        public virtual DecommissionRequest Decommission(string beaconName)
        {
            return new DecommissionRequest(service, beaconName);
        }

        /// <summary>Decommissions the specified beacon in the service. This beacon will no longer be returned from
        /// `beaconinfo.getforobserved`. This operation is permanent -- you will not be able to re-register a beacon
        /// with this ID again.</summary>
        public class DecommissionRequest : ProximitybeaconBaseServiceRequest<Google.Apis.Proximitybeacon.v1beta1.Data.Empty>
        {
            /// <summary>Constructs a new Decommission request.</summary>
            public DecommissionRequest(Google.Apis.Services.IClientService service, string beaconName)
                : base(service)
            {
                BeaconName = beaconName;
                InitParameters();
            }


            /// <summary>Beacon that should be decommissioned. Required.</summary>
            [Google.Apis.Util.RequestParameterAttribute("beaconName", Google.Apis.Util.RequestParameterType.Path)]
            public virtual string BeaconName { get; private set; }


            ///<summary>Gets the method name.</summary>
            public override string MethodName
            {
                get { return "decommission"; }
            }

            ///<summary>Gets the HTTP method.</summary>
            public override string HttpMethod
            {
                get { return "POST"; }
            }

            ///<summary>Gets the REST path.</summary>
            public override string RestPath
            {
                get { return "v1beta1/{+beaconName}:decommission"; }
            }

            /// <summary>Initializes Decommission parameter list.</summary>
            protected override void InitParameters()
            {
                base.InitParameters();

                RequestParameters.Add(
                    "beaconName", new Google.Apis.Discovery.Parameter
                    {
                        Name = "beaconName",
                        IsRequired = true,
                        ParameterType = "path",
                        DefaultValue = null,
                        Pattern = @"^beacons/[^/]*$",
                    });
            }

        }

        /// <summary>Returns detailed information about the specified beacon.</summary>
        /// <param name="beaconName">Beacon that is requested.</param>
        public virtual GetRequest Get(string beaconName)
        {
            return new GetRequest(service, beaconName);
        }

        /// <summary>Returns detailed information about the specified beacon.</summary>
        public class GetRequest : ProximitybeaconBaseServiceRequest<Google.Apis.Proximitybeacon.v1beta1.Data.Beacon>
        {
            /// <summary>Constructs a new Get request.</summary>
            public GetRequest(Google.Apis.Services.IClientService service, string beaconName)
                : base(service)
            {
                BeaconName = beaconName;
                InitParameters();
            }


            /// <summary>Beacon that is requested.</summary>
            [Google.Apis.Util.RequestParameterAttribute("beaconName", Google.Apis.Util.RequestParameterType.Path)]
            public virtual string BeaconName { get; private set; }


            ///<summary>Gets the method name.</summary>
            public override string MethodName
            {
                get { return "get"; }
            }

            ///<summary>Gets the HTTP method.</summary>
            public override string HttpMethod
            {
                get { return "GET"; }
            }

            ///<summary>Gets the REST path.</summary>
            public override string RestPath
            {
                get { return "v1beta1/{+beaconName}"; }
            }

            /// <summary>Initializes Get parameter list.</summary>
            protected override void InitParameters()
            {
                base.InitParameters();

                RequestParameters.Add(
                    "beaconName", new Google.Apis.Discovery.Parameter
                    {
                        Name = "beaconName",
                        IsRequired = true,
                        ParameterType = "path",
                        DefaultValue = null,
                        Pattern = @"^beacons/[^/]*$",
                    });
            }

        }

        /// <summary>Searches the beacon registry for beacons that match the given search criteria. Only those beacons
        /// that the client has permission to list will be returned.</summary>
        public virtual ListRequest List()
        {
            return new ListRequest(service);
        }

        /// <summary>Searches the beacon registry for beacons that match the given search criteria. Only those beacons
        /// that the client has permission to list will be returned.</summary>
        public class ListRequest : ProximitybeaconBaseServiceRequest<Google.Apis.Proximitybeacon.v1beta1.Data.ListBeaconsResponse>
        {
            /// <summary>Constructs a new List request.</summary>
            public ListRequest(Google.Apis.Services.IClientService service)
                : base(service)
            {
                InitParameters();
            }


            /// <summary>Filter query string that supports the following field filters: * `description:""` For example:
            /// `description:"Room 3"` Returns beacons whose description matches tokens in the string "Room 3" (not
            /// necessarily that exact string). The string must be double-quoted. * `status:` For example:
            /// `status:active` Returns beacons whose status matches the given value. Values must be one of the
            /// Beacon.Status enum values (case insensitive). Accepts multiple filters which will be combined with OR
            /// logic. * `stability:` For example: `stability:mobile` Returns beacons whose expected stability matches
            /// the given value. Values must be one of the Beacon.Stability enum values (case insensitive). Accepts
            /// multiple filters which will be combined with OR logic. * `place_id:""` For example:
            /// `place_id:"ChIJVSZzVR8FdkgRXGmmm6SslKw="` Returns beacons explicitly registered at the given place,
            /// expressed as a Place ID obtained from [Google Places API](/places/place-id). Does not match places
            /// inside the given place. Does not consider the beacon's actual location (which may be different from its
            /// registered place). Accepts multiple filters that will be combined with OR logic. The place ID must be
            /// double-quoted. * `registration_time[|=]` For example: `registration_time>=1433116800` Returns beacons
            /// whose registration time matches the given filter. Supports the operators: , =. Timestamp must be
            /// expressed as an integer number of seconds since midnight January 1, 1970 UTC. Accepts at most two
            /// filters that will be combined with AND logic, to support "between" semantics. If more than two are
            /// supplied, the latter ones are ignored. * `lat: lng: radius:` For example: `lat:51.1232343 lng:-1.093852
            /// radius:1000` Returns beacons whose registered location is within the given circle. When any of these
            /// fields are given, all are required. Latitude and longitude must be decimal degrees between -90.0 and
            /// 90.0 and between -180.0 and 180.0 respectively. Radius must be an integer number of meters less than
            /// 1,000,000 (1000 km). * `property:"="` For example: `property:"battery-type=CR2032"` Returns beacons
            /// which have a property of the given name and value. Supports multiple filters which will be combined with
            /// OR logic. The entire name=value string must be double-quoted as one string. * `attachment_type:""` For
            /// example: `attachment_type:"my-namespace/my-type"` Returns beacons having at least one attachment of the
            /// given namespaced type. Supports "any within this namespace" via the partial wildcard syntax: "my-
            /// namespace". Supports multiple filters which will be combined with OR logic. The string must be double-
            /// quoted. Multiple filters on the same field are combined with OR logic (except registration_time which is
            /// combined with AND logic). Multiple filters on different fields are combined with AND logic. Filters
            /// should be separated by spaces. As with any HTTP query string parameter, the whole filter expression must
            /// be URL-encoded. Example REST request: `GET
            /// /v1beta1/beacons?q=status:active%20lat:51.123%20lng:-1.095%20radius:1000`</summary>
            [Google.Apis.Util.RequestParameterAttribute("q", Google.Apis.Util.RequestParameterType.Query)]
            public virtual string Q { get; set; }

            /// <summary>A pagination token obtained from a previous request to list beacons.</summary>
            [Google.Apis.Util.RequestParameterAttribute("pageToken", Google.Apis.Util.RequestParameterType.Query)]
            public virtual string PageToken { get; set; }

            /// <summary>The maximum number of records to return for this request, up to a server-defined upper
            /// limit.</summary>
            [Google.Apis.Util.RequestParameterAttribute("pageSize", Google.Apis.Util.RequestParameterType.Query)]
            public virtual System.Nullable<int> PageSize { get; set; }


            ///<summary>Gets the method name.</summary>
            public override string MethodName
            {
                get { return "list"; }
            }

            ///<summary>Gets the HTTP method.</summary>
            public override string HttpMethod
            {
                get { return "GET"; }
            }

            ///<summary>Gets the REST path.</summary>
            public override string RestPath
            {
                get { return "v1beta1/beacons"; }
            }

            /// <summary>Initializes List parameter list.</summary>
            protected override void InitParameters()
            {
                base.InitParameters();

                RequestParameters.Add(
                    "q", new Google.Apis.Discovery.Parameter
                    {
                        Name = "q",
                        IsRequired = false,
                        ParameterType = "query",
                        DefaultValue = null,
                        Pattern = null,
                    });
                RequestParameters.Add(
                    "pageToken", new Google.Apis.Discovery.Parameter
                    {
                        Name = "pageToken",
                        IsRequired = false,
                        ParameterType = "query",
                        DefaultValue = null,
                        Pattern = null,
                    });
                RequestParameters.Add(
                    "pageSize", new Google.Apis.Discovery.Parameter
                    {
                        Name = "pageSize",
                        IsRequired = false,
                        ParameterType = "query",
                        DefaultValue = null,
                        Pattern = null,
                    });
            }

        }

        /// <summary>Registers a previously unregistered beacon given its `advertisedId`. These IDs are unique within
        /// the system. An ID can be registered only once.</summary>
        /// <param name="body">The body of the request.</param>
        public virtual RegisterRequest Register(Google.Apis.Proximitybeacon.v1beta1.Data.Beacon body)
        {
            return new RegisterRequest(service, body);
        }

        /// <summary>Registers a previously unregistered beacon given its `advertisedId`. These IDs are unique within
        /// the system. An ID can be registered only once.</summary>
        public class RegisterRequest : ProximitybeaconBaseServiceRequest<Google.Apis.Proximitybeacon.v1beta1.Data.Beacon>
        {
            /// <summary>Constructs a new Register request.</summary>
            public RegisterRequest(Google.Apis.Services.IClientService service, Google.Apis.Proximitybeacon.v1beta1.Data.Beacon body)
                : base(service)
            {
                Body = body;
                InitParameters();
            }



            /// <summary>Gets or sets the body of this request.</summary>
            Google.Apis.Proximitybeacon.v1beta1.Data.Beacon Body { get; set; }

            ///<summary>Returns the body of the request.</summary>
            protected override object GetBody() { return Body; }

            ///<summary>Gets the method name.</summary>
            public override string MethodName
            {
                get { return "register"; }
            }

            ///<summary>Gets the HTTP method.</summary>
            public override string HttpMethod
            {
                get { return "POST"; }
            }

            ///<summary>Gets the REST path.</summary>
            public override string RestPath
            {
                get { return "v1beta1/beacons:register"; }
            }

            /// <summary>Initializes Register parameter list.</summary>
            protected override void InitParameters()
            {
                base.InitParameters();

            }

        }

        /// <summary>Updates the information about the specified beacon. **Any field that you do not populate in the
        /// submitted beacon will be permanently erased**, so you should follow the "read, modify, write" pattern to
        /// avoid inadvertently destroying data. Changes to the beacon status via this method will be silently ignored.
        /// To update beacon status, use the separate methods on this API for (de)activation and
        /// decommissioning.</summary>
        /// <param name="body">The body of the request.</param>
        /// <param name="beaconName">Resource name of this beacon. A beacon name has the format "beacons/N!beaconId" where the
        /// beaconId is the base16 ID broadcast by the beacon and N is a code for the beacon's type. Possible values are `3` for
        /// Eddystone, `1` for iBeacon, or `5` for AltBeacon. This field must be left empty when registering. After reading a
        /// beacon, clients can use the name for future operations.</param>
        public virtual UpdateRequest Update(Google.Apis.Proximitybeacon.v1beta1.Data.Beacon body, string beaconName)
        {
            return new UpdateRequest(service, body, beaconName);
        }

        /// <summary>Updates the information about the specified beacon. **Any field that you do not populate in the
        /// submitted beacon will be permanently erased**, so you should follow the "read, modify, write" pattern to
        /// avoid inadvertently destroying data. Changes to the beacon status via this method will be silently ignored.
        /// To update beacon status, use the separate methods on this API for (de)activation and
        /// decommissioning.</summary>
        public class UpdateRequest : ProximitybeaconBaseServiceRequest<Google.Apis.Proximitybeacon.v1beta1.Data.Beacon>
        {
            /// <summary>Constructs a new Update request.</summary>
            public UpdateRequest(Google.Apis.Services.IClientService service, Google.Apis.Proximitybeacon.v1beta1.Data.Beacon body, string beaconName)
                : base(service)
            {
                BeaconName = beaconName;
                Body = body;
                InitParameters();
            }


            /// <summary>Resource name of this beacon. A beacon name has the format "beacons/N!beaconId" where the
            /// beaconId is the base16 ID broadcast by the beacon and N is a code for the beacon's type. Possible values
            /// are `3` for Eddystone, `1` for iBeacon, or `5` for AltBeacon. This field must be left empty when
            /// registering. After reading a beacon, clients can use the name for future operations.</summary>
            [Google.Apis.Util.RequestParameterAttribute("beaconName", Google.Apis.Util.RequestParameterType.Path)]
            public virtual string BeaconName { get; private set; }


            /// <summary>Gets or sets the body of this request.</summary>
            Google.Apis.Proximitybeacon.v1beta1.Data.Beacon Body { get; set; }

            ///<summary>Returns the body of the request.</summary>
            protected override object GetBody() { return Body; }

            ///<summary>Gets the method name.</summary>
            public override string MethodName
            {
                get { return "update"; }
            }

            ///<summary>Gets the HTTP method.</summary>
            public override string HttpMethod
            {
                get { return "PUT"; }
            }

            ///<summary>Gets the REST path.</summary>
            public override string RestPath
            {
                get { return "v1beta1/{+beaconName}"; }
            }

            /// <summary>Initializes Update parameter list.</summary>
            protected override void InitParameters()
            {
                base.InitParameters();

                RequestParameters.Add(
                    "beaconName", new Google.Apis.Discovery.Parameter
                    {
                        Name = "beaconName",
                        IsRequired = true,
                        ParameterType = "path",
                        DefaultValue = null,
                        Pattern = @"^beacons/[^/]*$",
                    });
            }

        }
    }

    /// <summary>The "namespaces" collection of methods.</summary>
    public class NamespacesResource
    {
        private const string Resource = "namespaces";

        /// <summary>The service which this resource belongs to.</summary>
        private readonly Google.Apis.Services.IClientService service;

        /// <summary>Constructs a new resource.</summary>
        public NamespacesResource(Google.Apis.Services.IClientService service)
        {
            this.service = service;

        }


        /// <summary>Lists all attachment namespaces owned by your Google Developers Console project. Attachment data
        /// associated with a beacon must include a namespaced type, and the namespace must be owned by your
        /// project.</summary>
        public virtual ListRequest List()
        {
            return new ListRequest(service);
        }

        /// <summary>Lists all attachment namespaces owned by your Google Developers Console project. Attachment data
        /// associated with a beacon must include a namespaced type, and the namespace must be owned by your
        /// project.</summary>
        public class ListRequest : ProximitybeaconBaseServiceRequest<Google.Apis.Proximitybeacon.v1beta1.Data.ListNamespacesResponse>
        {
            /// <summary>Constructs a new List request.</summary>
            public ListRequest(Google.Apis.Services.IClientService service)
                : base(service)
            {
                InitParameters();
            }



            ///<summary>Gets the method name.</summary>
            public override string MethodName
            {
                get { return "list"; }
            }

            ///<summary>Gets the HTTP method.</summary>
            public override string HttpMethod
            {
                get { return "GET"; }
            }

            ///<summary>Gets the REST path.</summary>
            public override string RestPath
            {
                get { return "v1beta1/namespaces"; }
            }

            /// <summary>Initializes List parameter list.</summary>
            protected override void InitParameters()
            {
                base.InitParameters();

            }

        }
    }
}

namespace Google.Apis.Proximitybeacon.v1beta1.Data
{    

    /// <summary>Defines a unique identifier of a beacon as broadcast by the device.</summary>
    public class AdvertisedId : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>The actual beacon identifier, as broadcast by the beacon hardware. Must be
        /// [base64](http://tools.ietf.org/html/rfc4648#section-4) encoded in HTTP requests, and will be so encoded
        /// (with padding) in responses. The base64 encoding should be of the binary byte-stream and not any textual
        /// (such as hex) representation thereof. Required.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("id")]
        public virtual string Id { get; set; } 

        /// <summary>Specifies the identifier type. Required.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("type")]
        public virtual string Type { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>A subset of attachment information served via the `beaconinfo.getforobserved` method, used when your
    /// users encounter your beacons.</summary>
    public class AttachmentInfo : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>An opaque data container for client-provided data.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("data")]
        public virtual string Data { get; set; } 

        /// <summary>Specifies what kind of attachment this is. Tells a client how to interpret the `data` field. Format
        /// is namespace/type, for example scrupulous-wombat-12345/welcome-message</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("namespacedType")]
        public virtual string NamespacedType { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>Details of a beacon device.</summary>
    public class Beacon : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>The identifier of a beacon as advertised by it. This field must be populated when registering. It
        /// may be empty when updating a beacon record because it is ignored in updates.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("advertisedId")]
        public virtual AdvertisedId AdvertisedId { get; set; } 

        /// <summary>Resource name of this beacon. A beacon name has the format "beacons/N!beaconId" where the beaconId
        /// is the base16 ID broadcast by the beacon and N is a code for the beacon's type. Possible values are `3` for
        /// Eddystone, `1` for iBeacon, or `5` for AltBeacon. This field must be left empty when registering. After
        /// reading a beacon, clients can use the name for future operations.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("beaconName")]
        public virtual string BeaconName { get; set; } 

        /// <summary>Free text used to identify and describe the beacon. Maximum length 140 characters.
        /// Optional.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("description")]
        public virtual string Description { get; set; } 

        /// <summary>Expected location stability. This is set when the beacon is registered or updated, not
        /// automatically detected in any way. Optional.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("expectedStability")]
        public virtual string ExpectedStability { get; set; } 

        /// <summary>The indoor level information for this beacon, if known. As returned by the Google Maps API.
        /// Optional.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("indoorLevel")]
        public virtual IndoorLevel IndoorLevel { get; set; } 

        /// <summary>The location of the beacon, expressed as a latitude and longitude pair. This location is given when
        /// the beacon is registered or updated. It does not necessarily indicate the actual current location of the
        /// beacon. Optional.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("latLng")]
        public virtual LatLng LatLng { get; set; } 

        /// <summary>The [Google Places API](/places/place-id) Place ID of the place where the beacon is deployed. This
        /// is given when the beacon is registered or updated, not automatically detected in any way.
        /// Optional.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("placeId")]
        public virtual string PlaceId { get; set; } 

        /// <summary>Properties of the beacon device, for example battery type or firmware version. Optional.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("properties")]
        public virtual System.Collections.Generic.IDictionary<string,string> Properties { get; set; } 

        /// <summary>Current status of the beacon. Required.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("status")]
        public virtual string Status { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>Project-specific data associated with a beacon.</summary>
    public class BeaconAttachment : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>Resource name of this attachment. Attachment names have the format:
        /// beacons/beacon_id/attachments/attachment_id. Leave this empty on creation.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("attachmentName")]
        public virtual string AttachmentName { get; set; } 

        /// <summary>An opaque data container for client-provided data. Must be
        /// [base64](http://tools.ietf.org/html/rfc4648#section-4) encoded in HTTP requests, and will be so encoded
        /// (with padding) in responses. Required.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("data")]
        public virtual string Data { get; set; } 

        /// <summary>Specifies what kind of attachment this is. Tells a client how to interpret the `data` field. Format
        /// is namespace/type. Namespace provides type separation between clients. Type describes the type of `data`,
        /// for use by the client when parsing the `data` field. Required.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("namespacedType")]
        public virtual string NamespacedType { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>A subset of beacon information served via the `beaconinfo.getforobserved` method, which you call when
    /// users of your app encounter your beacons.</summary>
    public class BeaconInfo : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>The ID advertised by the beacon.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("advertisedId")]
        public virtual AdvertisedId AdvertisedId { get; set; } 

        /// <summary>Attachments matching the type(s) requested. May be empty if no attachment types were requested, or
        /// if none matched.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("attachments")]
        public virtual System.Collections.Generic.IList<AttachmentInfo> Attachments { get; set; } 

        /// <summary>The name under which the beacon is registered.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("beaconName")]
        public virtual string BeaconName { get; set; } 

        /// <summary>Free text used to identify or describe the beacon in a registered establishment. For example:
        /// "entrance", "room 101", etc. May be empty.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("description")]
        public virtual string Description { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>Represents a whole calendar date, e.g. date of birth. The time of day and time zone are either
    /// specified elsewhere or are not significant. The date is relative to the Proleptic Gregorian Calendar. The day
    /// may be 0 to represent a year and month where the day is not significant, e.g. credit card expiration date. The
    /// year may be 0 to represent a month and day independent of year, e.g. anniversary date. Related types are
    /// [google.type.TimeOfDay][] and `google.protobuf.Timestamp`.</summary>
    public class Date : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>Day of month. Must be from 1 to 31 and valid for the year and month, or 0 if specifying a
        /// year/month where the day is not sigificant.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("day")]
        public virtual System.Nullable<int> Day { get; set; } 

        /// <summary>Month of year of date. Must be from 1 to 12.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("month")]
        public virtual System.Nullable<int> Month { get; set; } 

        /// <summary>Year of date. Must be from 1 to 9,999, or 0 if specifying a date without a year.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("year")]
        public virtual System.Nullable<int> Year { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>Response for a request to delete attachments.</summary>
    public class DeleteAttachmentsResponse : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>The number of attachments that were deleted.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("numDeleted")]
        public virtual System.Nullable<int> NumDeleted { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>Diagnostics for a single beacon.</summary>
    public class Diagnostics : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>An unordered list of Alerts that the beacon has.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("alerts")]
        public virtual System.Collections.Generic.IList<string> Alerts { get; set; } 

        /// <summary>Resource name of the beacon.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("beaconName")]
        public virtual string BeaconName { get; set; } 

        /// <summary>The date when the battery is expected to be low. If the value is missing then there is no estimate
        /// for when the battery will be low. This value is only an estimate, not an exact date.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("estimatedLowBatteryDate")]
        public virtual Date EstimatedLowBatteryDate { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A
    /// typical example is to use it as the request or the response type of an API method. For instance: service Foo {
    /// rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON representation for `Empty` is empty
    /// JSON object `{}`.</summary>
    public class Empty : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>Request for beacon and attachment information about beacons that a mobile client has encountered "in
    /// the wild".</summary>
    public class GetInfoForObservedBeaconsRequest : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>Specifies what kind of attachments to include in the response. When given, the response will
        /// include only attachments of the given types. When empty, no attachments will be returned. Must be in the
        /// format namespace/type. Accepts `*` to specify all types in all namespaces. Optional.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("namespacedTypes")]
        public virtual System.Collections.Generic.IList<string> NamespacedTypes { get; set; } 

        /// <summary>The beacons that the client has encountered. At least one must be given.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("observations")]
        public virtual System.Collections.Generic.IList<Observation> Observations { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>Information about the requested beacons, optionally including attachment data.</summary>
    public class GetInfoForObservedBeaconsResponse : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>Public information about beacons. May be empty if the request matched no beacons.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("beacons")]
        public virtual System.Collections.Generic.IList<BeaconInfo> Beacons { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>Indoor level, a human-readable string as returned by Google Maps APIs, useful to indicate which floor
    /// of a building a beacon is located on.</summary>
    public class IndoorLevel : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>The name of this level.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("name")]
        public virtual string Name { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>An object representing a latitude/longitude pair. This is expressed as a pair of doubles representing
    /// degrees latitude and degrees longitude. Unless specified otherwise, this must conform to the WGS84 standard.
    /// Values must be within normalized ranges. Example of normalization code in Python: def
    /// NormalizeLongitude(longitude): Wrapsdecimal degrees longitude to [-180.0, 180.0]. q, r = divmod(longitude,
    /// 360.0) if r > 180.0 or (r == 180.0 and q <= -1.0): return r - 360.0 return r def NormalizeLatLng(latitude,
    /// longitude): Wraps decimal degrees latitude and longitude to [-180.0, 180.0] and [-90.0, 90.0], respectively. r =
    /// latitude % 360.0 if r = 270.0: return r - 360, NormalizeLongitude(longitude) else: return 180 - r,
    /// NormalizeLongitude(longitude + 180.0) assert 180.0 == NormalizeLongitude(180.0) assert -180.0 ==
    /// NormalizeLongitude(-180.0) assert -179.0 == NormalizeLongitude(181.0) assert (0.0, 0.0) ==
    /// NormalizeLatLng(360.0, 0.0) assert (0.0, 0.0) == NormalizeLatLng(-360.0, 0.0) assert (85.0, 180.0) ==
    /// NormalizeLatLng(95.0, 0.0) assert (-85.0, -170.0) == NormalizeLatLng(-95.0, 10.0) assert (90.0, 10.0) ==
    /// NormalizeLatLng(90.0, 10.0) assert (-90.0, -10.0) == NormalizeLatLng(-90.0, -10.0) assert (0.0, -170.0) ==
    /// NormalizeLatLng(-180.0, 10.0) assert (0.0, -170.0) == NormalizeLatLng(180.0, 10.0) assert (-90.0, 10.0) ==
    /// NormalizeLatLng(270.0, 10.0) assert (90.0, 10.0) == NormalizeLatLng(-270.0, 10.0)</summary>
    public class LatLng : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>The latitude in degrees. It must be in the range [-90.0, +90.0].</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("latitude")]
        public virtual System.Nullable<double> Latitude { get; set; } 

        /// <summary>The longitude in degrees. It must be in the range [-180.0, +180.0].</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("longitude")]
        public virtual System.Nullable<double> Longitude { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>Response to ListBeaconAttachments that contains the requested attachments.</summary>
    public class ListBeaconAttachmentsResponse : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>The attachments that corresponded to the request params.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("attachments")]
        public virtual System.Collections.Generic.IList<BeaconAttachment> Attachments { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>Response that contains list beacon results and pagination help.</summary>
    public class ListBeaconsResponse : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>The beacons that matched the search criteria.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("beacons")]
        public virtual System.Collections.Generic.IList<Beacon> Beacons { get; set; } 

        /// <summary>An opaque pagination token that the client may provide in their next request to retrieve the next
        /// page of results.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("nextPageToken")]
        public virtual string NextPageToken { get; set; } 

        /// <summary>Estimate of the total number of beacons matched by the query. Higher values may be less
        /// accurate.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("totalCount")]
        public virtual System.Nullable<long> TotalCount { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>Response that contains the requested diagnostics.</summary>
    public class ListDiagnosticsResponse : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>The diagnostics matching the given request.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("diagnostics")]
        public virtual System.Collections.Generic.IList<Diagnostics> Diagnostics { get; set; } 

        /// <summary>Token that can be used for pagination. Returned only if the request matches more beacons than can
        /// be returned in this response.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("nextPageToken")]
        public virtual string NextPageToken { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>Response to ListNamespacesRequest that contains all the project's namespaces.</summary>
    public class ListNamespacesResponse : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>The attachments that corresponded to the request params.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("namespaces")]
        public virtual System.Collections.Generic.IList<Namespace> Namespaces { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>An attachment namespace defines read and write access for all the attachments created under it. Each
    /// namespace is globally unique, and owned by one project which is the only project that can create attachments
    /// under it.</summary>
    public class Namespace : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>Resource name of this namespace. Namespaces names have the format: namespaces/namespace.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("namespaceName")]
        public virtual string NamespaceName { get; set; } 

        /// <summary>Specifies what clients may receive attachments under this namespace via
        /// `beaconinfo.getforobserved`.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("servingVisibility")]
        public virtual string ServingVisibility { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>Represents one beacon observed once.</summary>
    public class Observation : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>The ID advertised by the beacon the client has encountered. Required.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("advertisedId")]
        public virtual AdvertisedId AdvertisedId { get; set; } 

        /// <summary>The array of telemetry bytes received from the beacon. The server is responsible for parsing it.
        /// This field may frequently be empty, as with a beacon that transmits telemetry only occasionally.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("telemetry")]
        public virtual string Telemetry { get; set; } 

        /// <summary>Time when the beacon was observed. Being sourced from a mobile device, this time may be
        /// suspect.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("timestampMs")]
        public virtual string TimestampMs { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }
}
