// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by google-apis-code-generator 1.5.1
//     C# generator version: 1.29.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

/**
 * \brief
 *   Google Vault API Version v1
 *
 * \section ApiInfo API Version Information
 *    <table>
 *      <tr><th>API
 *          <td><a href='https://developers.google.com/vault'>Google Vault API</a>
 *      <tr><th>API Version<td>v1
 *      <tr><th>API Rev<td>20170812 (954)
 *      <tr><th>API Docs
 *          <td><a href='https://developers.google.com/vault'>
 *              https://developers.google.com/vault</a>
 *      <tr><th>Discovery Name<td>vault
 *    </table>
 *
 * \section ForMoreInfo For More Information
 *
 * The complete API documentation for using Google Vault API can be found at
 * <a href='https://developers.google.com/vault'>https://developers.google.com/vault</a>.
 *
 * For more information about the Google APIs Client Library for .NET, see
 * <a href='https://developers.google.com/api-client-library/dotnet/get_started'>
 * https://developers.google.com/api-client-library/dotnet/get_started</a>
 */

namespace Google.Apis.Vault.v1
{
    /// <summary>The Vault Service.</summary>
    public class VaultService : Google.Apis.Services.BaseClientService
    {
        /// <summary>The API version.</summary>
        public const string Version = "v1";

        /// <summary>The discovery version used to generate this service.</summary>
        public static Google.Apis.Discovery.DiscoveryVersion DiscoveryVersionUsed =
            Google.Apis.Discovery.DiscoveryVersion.Version_1_0;

        /// <summary>Constructs a new service.</summary>
        public VaultService() :
            this(new Google.Apis.Services.BaseClientService.Initializer()) {}

        /// <summary>Constructs a new service.</summary>
        /// <param name="initializer">The service initializer.</param>
        public VaultService(Google.Apis.Services.BaseClientService.Initializer initializer)
            : base(initializer)
        {
            matters = new MattersResource(this);
        }

        /// <summary>Gets the service supported features.</summary>
        public override System.Collections.Generic.IList<string> Features
        {
            get { return new string[0]; }
        }

        /// <summary>Gets the service name.</summary>
        public override string Name
        {
            get { return "vault"; }
        }

        /// <summary>Gets the service base URI.</summary>
        public override string BaseUri
        {
            get { return "https://vault.googleapis.com/"; }
        }

        /// <summary>Gets the service base path.</summary>
        public override string BasePath
        {
            get { return ""; }
        }

        #if !NET40
        /// <summary>Gets the batch base URI; <c>null</c> if unspecified.</summary>
        public override string BatchUri
        {
            get { return "https://vault.googleapis.com/batch"; }
        }

        /// <summary>Gets the batch base path; <c>null</c> if unspecified.</summary>
        public override string BatchPath
        {
            get { return "batch"; }
        }
        #endif

        /// <summary>Available OAuth 2.0 scopes for use with the Google Vault API.</summary>
        public class Scope
        {
            /// <summary>Manage your eDiscovery data</summary>
            public static string Ediscovery = "https://www.googleapis.com/auth/ediscovery";

            /// <summary>View your eDiscovery data</summary>
            public static string EdiscoveryReadonly = "https://www.googleapis.com/auth/ediscovery.readonly";

        }



        private readonly MattersResource matters;

        /// <summary>Gets the Matters resource.</summary>
        public virtual MattersResource Matters
        {
            get { return matters; }
        }
    }

    ///<summary>A base abstract class for Vault requests.</summary>
    public abstract class VaultBaseServiceRequest<TResponse> : Google.Apis.Requests.ClientServiceRequest<TResponse>
    {
        ///<summary>Constructs a new VaultBaseServiceRequest instance.</summary>
        protected VaultBaseServiceRequest(Google.Apis.Services.IClientService service)
            : base(service)
        {
        }

        /// <summary>V1 error format.</summary>
        [Google.Apis.Util.RequestParameterAttribute("$.xgafv", Google.Apis.Util.RequestParameterType.Query)]
        public virtual System.Nullable<XgafvEnum> Xgafv { get; set; }

        /// <summary>V1 error format.</summary>
        public enum XgafvEnum
        {
            /// <summary>v1 error format</summary>
            [Google.Apis.Util.StringValueAttribute("1")]
            Value1,
            /// <summary>v2 error format</summary>
            [Google.Apis.Util.StringValueAttribute("2")]
            Value2,
        }

        /// <summary>OAuth access token.</summary>
        [Google.Apis.Util.RequestParameterAttribute("access_token", Google.Apis.Util.RequestParameterType.Query)]
        public virtual string AccessToken { get; set; }

        /// <summary>Data format for response.</summary>
        /// [default: json]
        [Google.Apis.Util.RequestParameterAttribute("alt", Google.Apis.Util.RequestParameterType.Query)]
        public virtual System.Nullable<AltEnum> Alt { get; set; }

        /// <summary>Data format for response.</summary>
        public enum AltEnum
        {
            /// <summary>Responses with Content-Type of application/json</summary>
            [Google.Apis.Util.StringValueAttribute("json")]
            Json,
            /// <summary>Media download with context-dependent Content-Type</summary>
            [Google.Apis.Util.StringValueAttribute("media")]
            Media,
            /// <summary>Responses with Content-Type of application/x-protobuf</summary>
            [Google.Apis.Util.StringValueAttribute("proto")]
            Proto,
        }

        /// <summary>OAuth bearer token.</summary>
        [Google.Apis.Util.RequestParameterAttribute("bearer_token", Google.Apis.Util.RequestParameterType.Query)]
        public virtual string BearerToken { get; set; }

        /// <summary>JSONP</summary>
        [Google.Apis.Util.RequestParameterAttribute("callback", Google.Apis.Util.RequestParameterType.Query)]
        public virtual string Callback { get; set; }

        /// <summary>Selector specifying which fields to include in a partial response.</summary>
        [Google.Apis.Util.RequestParameterAttribute("fields", Google.Apis.Util.RequestParameterType.Query)]
        public virtual string Fields { get; set; }

        /// <summary>API key. Your API key identifies your project and provides you with API access, quota, and reports.
        /// Required unless you provide an OAuth 2.0 token.</summary>
        [Google.Apis.Util.RequestParameterAttribute("key", Google.Apis.Util.RequestParameterType.Query)]
        public virtual string Key { get; set; }

        /// <summary>OAuth 2.0 token for the current user.</summary>
        [Google.Apis.Util.RequestParameterAttribute("oauth_token", Google.Apis.Util.RequestParameterType.Query)]
        public virtual string OauthToken { get; set; }

        /// <summary>Pretty-print response.</summary>
        /// [default: true]
        [Google.Apis.Util.RequestParameterAttribute("pp", Google.Apis.Util.RequestParameterType.Query)]
        public virtual System.Nullable<bool> Pp { get; set; }

        /// <summary>Returns response with indentations and line breaks.</summary>
        /// [default: true]
        [Google.Apis.Util.RequestParameterAttribute("prettyPrint", Google.Apis.Util.RequestParameterType.Query)]
        public virtual System.Nullable<bool> PrettyPrint { get; set; }

        /// <summary>Available to use for quota purposes for server-side applications. Can be any arbitrary string
        /// assigned to a user, but should not exceed 40 characters.</summary>
        [Google.Apis.Util.RequestParameterAttribute("quotaUser", Google.Apis.Util.RequestParameterType.Query)]
        public virtual string QuotaUser { get; set; }

        /// <summary>Legacy upload protocol for media (e.g. "media", "multipart").</summary>
        [Google.Apis.Util.RequestParameterAttribute("uploadType", Google.Apis.Util.RequestParameterType.Query)]
        public virtual string UploadType { get; set; }

        /// <summary>Upload protocol for media (e.g. "raw", "multipart").</summary>
        [Google.Apis.Util.RequestParameterAttribute("upload_protocol", Google.Apis.Util.RequestParameterType.Query)]
        public virtual string UploadProtocol { get; set; }

        /// <summary>Initializes Vault parameter list.</summary>
        protected override void InitParameters()
        {
            base.InitParameters();

            RequestParameters.Add(
                "$.xgafv", new Google.Apis.Discovery.Parameter
                {
                    Name = "$.xgafv",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = null,
                    Pattern = null,
                });
            RequestParameters.Add(
                "access_token", new Google.Apis.Discovery.Parameter
                {
                    Name = "access_token",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = null,
                    Pattern = null,
                });
            RequestParameters.Add(
                "alt", new Google.Apis.Discovery.Parameter
                {
                    Name = "alt",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = "json",
                    Pattern = null,
                });
            RequestParameters.Add(
                "bearer_token", new Google.Apis.Discovery.Parameter
                {
                    Name = "bearer_token",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = null,
                    Pattern = null,
                });
            RequestParameters.Add(
                "callback", new Google.Apis.Discovery.Parameter
                {
                    Name = "callback",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = null,
                    Pattern = null,
                });
            RequestParameters.Add(
                "fields", new Google.Apis.Discovery.Parameter
                {
                    Name = "fields",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = null,
                    Pattern = null,
                });
            RequestParameters.Add(
                "key", new Google.Apis.Discovery.Parameter
                {
                    Name = "key",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = null,
                    Pattern = null,
                });
            RequestParameters.Add(
                "oauth_token", new Google.Apis.Discovery.Parameter
                {
                    Name = "oauth_token",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = null,
                    Pattern = null,
                });
            RequestParameters.Add(
                "pp", new Google.Apis.Discovery.Parameter
                {
                    Name = "pp",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = "true",
                    Pattern = null,
                });
            RequestParameters.Add(
                "prettyPrint", new Google.Apis.Discovery.Parameter
                {
                    Name = "prettyPrint",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = "true",
                    Pattern = null,
                });
            RequestParameters.Add(
                "quotaUser", new Google.Apis.Discovery.Parameter
                {
                    Name = "quotaUser",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = null,
                    Pattern = null,
                });
            RequestParameters.Add(
                "uploadType", new Google.Apis.Discovery.Parameter
                {
                    Name = "uploadType",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = null,
                    Pattern = null,
                });
            RequestParameters.Add(
                "upload_protocol", new Google.Apis.Discovery.Parameter
                {
                    Name = "upload_protocol",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = null,
                    Pattern = null,
                });
        }
    }

    /// <summary>The "matters" collection of methods.</summary>
    public class MattersResource
    {
        private const string Resource = "matters";

        /// <summary>The service which this resource belongs to.</summary>
        private readonly Google.Apis.Services.IClientService service;

        /// <summary>Constructs a new resource.</summary>
        public MattersResource(Google.Apis.Services.IClientService service)
        {
            this.service = service;
            holds = new HoldsResource(service);

        }

        private readonly HoldsResource holds;

        /// <summary>Gets the Holds resource.</summary>
        public virtual HoldsResource Holds
        {
            get { return holds; }
        }

        /// <summary>The "holds" collection of methods.</summary>
        public class HoldsResource
        {
            private const string Resource = "holds";

            /// <summary>The service which this resource belongs to.</summary>
            private readonly Google.Apis.Services.IClientService service;

            /// <summary>Constructs a new resource.</summary>
            public HoldsResource(Google.Apis.Services.IClientService service)
            {
                this.service = service;
                accounts = new AccountsResource(service);

            }

            private readonly AccountsResource accounts;

            /// <summary>Gets the Accounts resource.</summary>
            public virtual AccountsResource Accounts
            {
                get { return accounts; }
            }

            /// <summary>The "accounts" collection of methods.</summary>
            public class AccountsResource
            {
                private const string Resource = "accounts";

                /// <summary>The service which this resource belongs to.</summary>
                private readonly Google.Apis.Services.IClientService service;

                /// <summary>Constructs a new resource.</summary>
                public AccountsResource(Google.Apis.Services.IClientService service)
                {
                    this.service = service;

                }


                /// <summary>Adds a HeldAccount to a hold. Accounts can only be added to a hold that has no
                /// held_org_unit set. Attempting to add an account to an OU-based hold will result in an
                /// error.</summary>
                /// <param name="body">The body of the request.</param>
                /// <param name="matterId">The matter ID.</param>
                /// <param name="holdId">The hold ID.</param>
                public virtual CreateRequest Create(Google.Apis.Vault.v1.Data.HeldAccount body, string matterId, string holdId)
                {
                    return new CreateRequest(service, body, matterId, holdId);
                }

                /// <summary>Adds a HeldAccount to a hold. Accounts can only be added to a hold that has no
                /// held_org_unit set. Attempting to add an account to an OU-based hold will result in an
                /// error.</summary>
                public class CreateRequest : VaultBaseServiceRequest<Google.Apis.Vault.v1.Data.HeldAccount>
                {
                    /// <summary>Constructs a new Create request.</summary>
                    public CreateRequest(Google.Apis.Services.IClientService service, Google.Apis.Vault.v1.Data.HeldAccount body, string matterId, string holdId)
                        : base(service)
                    {
                        MatterId = matterId;
                        HoldId = holdId;
                        Body = body;
                        InitParameters();
                    }


                    /// <summary>The matter ID.</summary>
                    [Google.Apis.Util.RequestParameterAttribute("matterId", Google.Apis.Util.RequestParameterType.Path)]
                    public virtual string MatterId { get; private set; }

                    /// <summary>The hold ID.</summary>
                    [Google.Apis.Util.RequestParameterAttribute("holdId", Google.Apis.Util.RequestParameterType.Path)]
                    public virtual string HoldId { get; private set; }


                    /// <summary>Gets or sets the body of this request.</summary>
                    Google.Apis.Vault.v1.Data.HeldAccount Body { get; set; }

                    ///<summary>Returns the body of the request.</summary>
                    protected override object GetBody() { return Body; }

                    ///<summary>Gets the method name.</summary>
                    public override string MethodName
                    {
                        get { return "create"; }
                    }

                    ///<summary>Gets the HTTP method.</summary>
                    public override string HttpMethod
                    {
                        get { return "POST"; }
                    }

                    ///<summary>Gets the REST path.</summary>
                    public override string RestPath
                    {
                        get { return "v1/matters/{matterId}/holds/{holdId}/accounts"; }
                    }

                    /// <summary>Initializes Create parameter list.</summary>
                    protected override void InitParameters()
                    {
                        base.InitParameters();

                        RequestParameters.Add(
                            "matterId", new Google.Apis.Discovery.Parameter
                            {
                                Name = "matterId",
                                IsRequired = true,
                                ParameterType = "path",
                                DefaultValue = null,
                                Pattern = null,
                            });
                        RequestParameters.Add(
                            "holdId", new Google.Apis.Discovery.Parameter
                            {
                                Name = "holdId",
                                IsRequired = true,
                                ParameterType = "path",
                                DefaultValue = null,
                                Pattern = null,
                            });
                    }

                }

                /// <summary>Removes a HeldAccount from a hold. If this request leaves the hold with no held accounts,
                /// the hold will not apply to any accounts.</summary>
                /// <param name="matterId">The matter ID.</param>
                /// <param name="holdId">The hold ID.</param>
                /// <param
                /// name="accountId">The ID of the account to remove from the hold.</param>
                public virtual DeleteRequest Delete(string matterId, string holdId, string accountId)
                {
                    return new DeleteRequest(service, matterId, holdId, accountId);
                }

                /// <summary>Removes a HeldAccount from a hold. If this request leaves the hold with no held accounts,
                /// the hold will not apply to any accounts.</summary>
                public class DeleteRequest : VaultBaseServiceRequest<Google.Apis.Vault.v1.Data.Empty>
                {
                    /// <summary>Constructs a new Delete request.</summary>
                    public DeleteRequest(Google.Apis.Services.IClientService service, string matterId, string holdId, string accountId)
                        : base(service)
                    {
                        MatterId = matterId;
                        HoldId = holdId;
                        AccountId = accountId;
                        InitParameters();
                    }


                    /// <summary>The matter ID.</summary>
                    [Google.Apis.Util.RequestParameterAttribute("matterId", Google.Apis.Util.RequestParameterType.Path)]
                    public virtual string MatterId { get; private set; }

                    /// <summary>The hold ID.</summary>
                    [Google.Apis.Util.RequestParameterAttribute("holdId", Google.Apis.Util.RequestParameterType.Path)]
                    public virtual string HoldId { get; private set; }

                    /// <summary>The ID of the account to remove from the hold.</summary>
                    [Google.Apis.Util.RequestParameterAttribute("accountId", Google.Apis.Util.RequestParameterType.Path)]
                    public virtual string AccountId { get; private set; }


                    ///<summary>Gets the method name.</summary>
                    public override string MethodName
                    {
                        get { return "delete"; }
                    }

                    ///<summary>Gets the HTTP method.</summary>
                    public override string HttpMethod
                    {
                        get { return "DELETE"; }
                    }

                    ///<summary>Gets the REST path.</summary>
                    public override string RestPath
                    {
                        get { return "v1/matters/{matterId}/holds/{holdId}/accounts/{accountId}"; }
                    }

                    /// <summary>Initializes Delete parameter list.</summary>
                    protected override void InitParameters()
                    {
                        base.InitParameters();

                        RequestParameters.Add(
                            "matterId", new Google.Apis.Discovery.Parameter
                            {
                                Name = "matterId",
                                IsRequired = true,
                                ParameterType = "path",
                                DefaultValue = null,
                                Pattern = null,
                            });
                        RequestParameters.Add(
                            "holdId", new Google.Apis.Discovery.Parameter
                            {
                                Name = "holdId",
                                IsRequired = true,
                                ParameterType = "path",
                                DefaultValue = null,
                                Pattern = null,
                            });
                        RequestParameters.Add(
                            "accountId", new Google.Apis.Discovery.Parameter
                            {
                                Name = "accountId",
                                IsRequired = true,
                                ParameterType = "path",
                                DefaultValue = null,
                                Pattern = null,
                            });
                    }

                }

                /// <summary>Lists HeldAccounts for a hold. This will only list individually specified held accounts. If
                /// the hold is on an OU, then use Admin SDK to enumerate its members.</summary>
                /// <param name="matterId">The matter ID.</param>
                /// <param name="holdId">The hold ID.</param>
                public virtual ListRequest List(string matterId, string holdId)
                {
                    return new ListRequest(service, matterId, holdId);
                }

                /// <summary>Lists HeldAccounts for a hold. This will only list individually specified held accounts. If
                /// the hold is on an OU, then use Admin SDK to enumerate its members.</summary>
                public class ListRequest : VaultBaseServiceRequest<Google.Apis.Vault.v1.Data.ListHeldAccountsResponse>
                {
                    /// <summary>Constructs a new List request.</summary>
                    public ListRequest(Google.Apis.Services.IClientService service, string matterId, string holdId)
                        : base(service)
                    {
                        MatterId = matterId;
                        HoldId = holdId;
                        InitParameters();
                    }


                    /// <summary>The matter ID.</summary>
                    [Google.Apis.Util.RequestParameterAttribute("matterId", Google.Apis.Util.RequestParameterType.Path)]
                    public virtual string MatterId { get; private set; }

                    /// <summary>The hold ID.</summary>
                    [Google.Apis.Util.RequestParameterAttribute("holdId", Google.Apis.Util.RequestParameterType.Path)]
                    public virtual string HoldId { get; private set; }


                    ///<summary>Gets the method name.</summary>
                    public override string MethodName
                    {
                        get { return "list"; }
                    }

                    ///<summary>Gets the HTTP method.</summary>
                    public override string HttpMethod
                    {
                        get { return "GET"; }
                    }

                    ///<summary>Gets the REST path.</summary>
                    public override string RestPath
                    {
                        get { return "v1/matters/{matterId}/holds/{holdId}/accounts"; }
                    }

                    /// <summary>Initializes List parameter list.</summary>
                    protected override void InitParameters()
                    {
                        base.InitParameters();

                        RequestParameters.Add(
                            "matterId", new Google.Apis.Discovery.Parameter
                            {
                                Name = "matterId",
                                IsRequired = true,
                                ParameterType = "path",
                                DefaultValue = null,
                                Pattern = null,
                            });
                        RequestParameters.Add(
                            "holdId", new Google.Apis.Discovery.Parameter
                            {
                                Name = "holdId",
                                IsRequired = true,
                                ParameterType = "path",
                                DefaultValue = null,
                                Pattern = null,
                            });
                    }

                }
            }

            /// <summary>Creates a hold in the given matter.</summary>
            /// <param name="body">The body of the request.</param>
            /// <param name="matterId">The matter ID.</param>
            public virtual CreateRequest Create(Google.Apis.Vault.v1.Data.Hold body, string matterId)
            {
                return new CreateRequest(service, body, matterId);
            }

            /// <summary>Creates a hold in the given matter.</summary>
            public class CreateRequest : VaultBaseServiceRequest<Google.Apis.Vault.v1.Data.Hold>
            {
                /// <summary>Constructs a new Create request.</summary>
                public CreateRequest(Google.Apis.Services.IClientService service, Google.Apis.Vault.v1.Data.Hold body, string matterId)
                    : base(service)
                {
                    MatterId = matterId;
                    Body = body;
                    InitParameters();
                }


                /// <summary>The matter ID.</summary>
                [Google.Apis.Util.RequestParameterAttribute("matterId", Google.Apis.Util.RequestParameterType.Path)]
                public virtual string MatterId { get; private set; }


                /// <summary>Gets or sets the body of this request.</summary>
                Google.Apis.Vault.v1.Data.Hold Body { get; set; }

                ///<summary>Returns the body of the request.</summary>
                protected override object GetBody() { return Body; }

                ///<summary>Gets the method name.</summary>
                public override string MethodName
                {
                    get { return "create"; }
                }

                ///<summary>Gets the HTTP method.</summary>
                public override string HttpMethod
                {
                    get { return "POST"; }
                }

                ///<summary>Gets the REST path.</summary>
                public override string RestPath
                {
                    get { return "v1/matters/{matterId}/holds"; }
                }

                /// <summary>Initializes Create parameter list.</summary>
                protected override void InitParameters()
                {
                    base.InitParameters();

                    RequestParameters.Add(
                        "matterId", new Google.Apis.Discovery.Parameter
                        {
                            Name = "matterId",
                            IsRequired = true,
                            ParameterType = "path",
                            DefaultValue = null,
                            Pattern = null,
                        });
                }

            }

            /// <summary>Removes a hold by ID. This will release any HeldAccounts on this Hold.</summary>
            /// <param name="matterId">The matter ID.</param>
            /// <param name="holdId">The hold ID.</param>
            public virtual DeleteRequest Delete(string matterId, string holdId)
            {
                return new DeleteRequest(service, matterId, holdId);
            }

            /// <summary>Removes a hold by ID. This will release any HeldAccounts on this Hold.</summary>
            public class DeleteRequest : VaultBaseServiceRequest<Google.Apis.Vault.v1.Data.Empty>
            {
                /// <summary>Constructs a new Delete request.</summary>
                public DeleteRequest(Google.Apis.Services.IClientService service, string matterId, string holdId)
                    : base(service)
                {
                    MatterId = matterId;
                    HoldId = holdId;
                    InitParameters();
                }


                /// <summary>The matter ID.</summary>
                [Google.Apis.Util.RequestParameterAttribute("matterId", Google.Apis.Util.RequestParameterType.Path)]
                public virtual string MatterId { get; private set; }

                /// <summary>The hold ID.</summary>
                [Google.Apis.Util.RequestParameterAttribute("holdId", Google.Apis.Util.RequestParameterType.Path)]
                public virtual string HoldId { get; private set; }


                ///<summary>Gets the method name.</summary>
                public override string MethodName
                {
                    get { return "delete"; }
                }

                ///<summary>Gets the HTTP method.</summary>
                public override string HttpMethod
                {
                    get { return "DELETE"; }
                }

                ///<summary>Gets the REST path.</summary>
                public override string RestPath
                {
                    get { return "v1/matters/{matterId}/holds/{holdId}"; }
                }

                /// <summary>Initializes Delete parameter list.</summary>
                protected override void InitParameters()
                {
                    base.InitParameters();

                    RequestParameters.Add(
                        "matterId", new Google.Apis.Discovery.Parameter
                        {
                            Name = "matterId",
                            IsRequired = true,
                            ParameterType = "path",
                            DefaultValue = null,
                            Pattern = null,
                        });
                    RequestParameters.Add(
                        "holdId", new Google.Apis.Discovery.Parameter
                        {
                            Name = "holdId",
                            IsRequired = true,
                            ParameterType = "path",
                            DefaultValue = null,
                            Pattern = null,
                        });
                }

            }

            /// <summary>Gets a hold by ID.</summary>
            /// <param name="matterId">The matter ID.</param>
            /// <param name="holdId">The hold ID.</param>
            public virtual GetRequest Get(string matterId, string holdId)
            {
                return new GetRequest(service, matterId, holdId);
            }

            /// <summary>Gets a hold by ID.</summary>
            public class GetRequest : VaultBaseServiceRequest<Google.Apis.Vault.v1.Data.Hold>
            {
                /// <summary>Constructs a new Get request.</summary>
                public GetRequest(Google.Apis.Services.IClientService service, string matterId, string holdId)
                    : base(service)
                {
                    MatterId = matterId;
                    HoldId = holdId;
                    InitParameters();
                }


                /// <summary>The matter ID.</summary>
                [Google.Apis.Util.RequestParameterAttribute("matterId", Google.Apis.Util.RequestParameterType.Path)]
                public virtual string MatterId { get; private set; }

                /// <summary>The hold ID.</summary>
                [Google.Apis.Util.RequestParameterAttribute("holdId", Google.Apis.Util.RequestParameterType.Path)]
                public virtual string HoldId { get; private set; }


                ///<summary>Gets the method name.</summary>
                public override string MethodName
                {
                    get { return "get"; }
                }

                ///<summary>Gets the HTTP method.</summary>
                public override string HttpMethod
                {
                    get { return "GET"; }
                }

                ///<summary>Gets the REST path.</summary>
                public override string RestPath
                {
                    get { return "v1/matters/{matterId}/holds/{holdId}"; }
                }

                /// <summary>Initializes Get parameter list.</summary>
                protected override void InitParameters()
                {
                    base.InitParameters();

                    RequestParameters.Add(
                        "matterId", new Google.Apis.Discovery.Parameter
                        {
                            Name = "matterId",
                            IsRequired = true,
                            ParameterType = "path",
                            DefaultValue = null,
                            Pattern = null,
                        });
                    RequestParameters.Add(
                        "holdId", new Google.Apis.Discovery.Parameter
                        {
                            Name = "holdId",
                            IsRequired = true,
                            ParameterType = "path",
                            DefaultValue = null,
                            Pattern = null,
                        });
                }

            }

            /// <summary>Lists holds within a matter. An empty page token in ListHoldsResponse denotes no more holds to
            /// list.</summary>
            /// <param name="matterId">The matter ID.</param>
            public virtual ListRequest List(string matterId)
            {
                return new ListRequest(service, matterId);
            }

            /// <summary>Lists holds within a matter. An empty page token in ListHoldsResponse denotes no more holds to
            /// list.</summary>
            public class ListRequest : VaultBaseServiceRequest<Google.Apis.Vault.v1.Data.ListHoldsResponse>
            {
                /// <summary>Constructs a new List request.</summary>
                public ListRequest(Google.Apis.Services.IClientService service, string matterId)
                    : base(service)
                {
                    MatterId = matterId;
                    InitParameters();
                }


                /// <summary>The matter ID.</summary>
                [Google.Apis.Util.RequestParameterAttribute("matterId", Google.Apis.Util.RequestParameterType.Path)]
                public virtual string MatterId { get; private set; }

                /// <summary>The number of holds to return in the response, between 0 and 100 inclusive. Leaving this
                /// empty, or as 0, is the same as page_size = 100.</summary>
                [Google.Apis.Util.RequestParameterAttribute("pageSize", Google.Apis.Util.RequestParameterType.Query)]
                public virtual System.Nullable<int> PageSize { get; set; }

                /// <summary>The pagination token as returned in the response. An empty token means start from the
                /// beginning.</summary>
                [Google.Apis.Util.RequestParameterAttribute("pageToken", Google.Apis.Util.RequestParameterType.Query)]
                public virtual string PageToken { get; set; }


                ///<summary>Gets the method name.</summary>
                public override string MethodName
                {
                    get { return "list"; }
                }

                ///<summary>Gets the HTTP method.</summary>
                public override string HttpMethod
                {
                    get { return "GET"; }
                }

                ///<summary>Gets the REST path.</summary>
                public override string RestPath
                {
                    get { return "v1/matters/{matterId}/holds"; }
                }

                /// <summary>Initializes List parameter list.</summary>
                protected override void InitParameters()
                {
                    base.InitParameters();

                    RequestParameters.Add(
                        "matterId", new Google.Apis.Discovery.Parameter
                        {
                            Name = "matterId",
                            IsRequired = true,
                            ParameterType = "path",
                            DefaultValue = null,
                            Pattern = null,
                        });
                    RequestParameters.Add(
                        "pageSize", new Google.Apis.Discovery.Parameter
                        {
                            Name = "pageSize",
                            IsRequired = false,
                            ParameterType = "query",
                            DefaultValue = null,
                            Pattern = null,
                        });
                    RequestParameters.Add(
                        "pageToken", new Google.Apis.Discovery.Parameter
                        {
                            Name = "pageToken",
                            IsRequired = false,
                            ParameterType = "query",
                            DefaultValue = null,
                            Pattern = null,
                        });
                }

            }

            /// <summary>Updates the OU and/or query parameters of a hold. You cannot add accounts to a hold that covers
            /// an OU, nor can you add OUs to a hold that covers individual accounts. Accounts listed in the hold will
            /// be ignored.</summary>
            /// <param name="body">The body of the request.</param>
            /// <param name="matterId">The matter ID.</param>
            /// <param name="holdId">The ID of the hold.</param>
            public virtual UpdateRequest Update(Google.Apis.Vault.v1.Data.Hold body, string matterId, string holdId)
            {
                return new UpdateRequest(service, body, matterId, holdId);
            }

            /// <summary>Updates the OU and/or query parameters of a hold. You cannot add accounts to a hold that covers
            /// an OU, nor can you add OUs to a hold that covers individual accounts. Accounts listed in the hold will
            /// be ignored.</summary>
            public class UpdateRequest : VaultBaseServiceRequest<Google.Apis.Vault.v1.Data.Hold>
            {
                /// <summary>Constructs a new Update request.</summary>
                public UpdateRequest(Google.Apis.Services.IClientService service, Google.Apis.Vault.v1.Data.Hold body, string matterId, string holdId)
                    : base(service)
                {
                    MatterId = matterId;
                    HoldId = holdId;
                    Body = body;
                    InitParameters();
                }


                /// <summary>The matter ID.</summary>
                [Google.Apis.Util.RequestParameterAttribute("matterId", Google.Apis.Util.RequestParameterType.Path)]
                public virtual string MatterId { get; private set; }

                /// <summary>The ID of the hold.</summary>
                [Google.Apis.Util.RequestParameterAttribute("holdId", Google.Apis.Util.RequestParameterType.Path)]
                public virtual string HoldId { get; private set; }


                /// <summary>Gets or sets the body of this request.</summary>
                Google.Apis.Vault.v1.Data.Hold Body { get; set; }

                ///<summary>Returns the body of the request.</summary>
                protected override object GetBody() { return Body; }

                ///<summary>Gets the method name.</summary>
                public override string MethodName
                {
                    get { return "update"; }
                }

                ///<summary>Gets the HTTP method.</summary>
                public override string HttpMethod
                {
                    get { return "PUT"; }
                }

                ///<summary>Gets the REST path.</summary>
                public override string RestPath
                {
                    get { return "v1/matters/{matterId}/holds/{holdId}"; }
                }

                /// <summary>Initializes Update parameter list.</summary>
                protected override void InitParameters()
                {
                    base.InitParameters();

                    RequestParameters.Add(
                        "matterId", new Google.Apis.Discovery.Parameter
                        {
                            Name = "matterId",
                            IsRequired = true,
                            ParameterType = "path",
                            DefaultValue = null,
                            Pattern = null,
                        });
                    RequestParameters.Add(
                        "holdId", new Google.Apis.Discovery.Parameter
                        {
                            Name = "holdId",
                            IsRequired = true,
                            ParameterType = "path",
                            DefaultValue = null,
                            Pattern = null,
                        });
                }

            }
        }

        /// <summary>Adds an account as a matter collaborator.</summary>
        /// <param name="body">The body of the request.</param>
        /// <param name="matterId">The matter ID.</param>
        public virtual AddPermissionsRequest AddPermissions(Google.Apis.Vault.v1.Data.AddMatterPermissionsRequest body, string matterId)
        {
            return new AddPermissionsRequest(service, body, matterId);
        }

        /// <summary>Adds an account as a matter collaborator.</summary>
        public class AddPermissionsRequest : VaultBaseServiceRequest<Google.Apis.Vault.v1.Data.MatterPermission>
        {
            /// <summary>Constructs a new AddPermissions request.</summary>
            public AddPermissionsRequest(Google.Apis.Services.IClientService service, Google.Apis.Vault.v1.Data.AddMatterPermissionsRequest body, string matterId)
                : base(service)
            {
                MatterId = matterId;
                Body = body;
                InitParameters();
            }


            /// <summary>The matter ID.</summary>
            [Google.Apis.Util.RequestParameterAttribute("matterId", Google.Apis.Util.RequestParameterType.Path)]
            public virtual string MatterId { get; private set; }


            /// <summary>Gets or sets the body of this request.</summary>
            Google.Apis.Vault.v1.Data.AddMatterPermissionsRequest Body { get; set; }

            ///<summary>Returns the body of the request.</summary>
            protected override object GetBody() { return Body; }

            ///<summary>Gets the method name.</summary>
            public override string MethodName
            {
                get { return "addPermissions"; }
            }

            ///<summary>Gets the HTTP method.</summary>
            public override string HttpMethod
            {
                get { return "POST"; }
            }

            ///<summary>Gets the REST path.</summary>
            public override string RestPath
            {
                get { return "v1/matters/{matterId}:addPermissions"; }
            }

            /// <summary>Initializes AddPermissions parameter list.</summary>
            protected override void InitParameters()
            {
                base.InitParameters();

                RequestParameters.Add(
                    "matterId", new Google.Apis.Discovery.Parameter
                    {
                        Name = "matterId",
                        IsRequired = true,
                        ParameterType = "path",
                        DefaultValue = null,
                        Pattern = null,
                    });
            }

        }

        /// <summary>Closes the specified matter. Returns matter with updated state.</summary>
        /// <param name="body">The body of the request.</param>
        /// <param name="matterId">The matter ID.</param>
        public virtual CloseRequest Close(Google.Apis.Vault.v1.Data.CloseMatterRequest body, string matterId)
        {
            return new CloseRequest(service, body, matterId);
        }

        /// <summary>Closes the specified matter. Returns matter with updated state.</summary>
        public class CloseRequest : VaultBaseServiceRequest<Google.Apis.Vault.v1.Data.CloseMatterResponse>
        {
            /// <summary>Constructs a new Close request.</summary>
            public CloseRequest(Google.Apis.Services.IClientService service, Google.Apis.Vault.v1.Data.CloseMatterRequest body, string matterId)
                : base(service)
            {
                MatterId = matterId;
                Body = body;
                InitParameters();
            }


            /// <summary>The matter ID.</summary>
            [Google.Apis.Util.RequestParameterAttribute("matterId", Google.Apis.Util.RequestParameterType.Path)]
            public virtual string MatterId { get; private set; }


            /// <summary>Gets or sets the body of this request.</summary>
            Google.Apis.Vault.v1.Data.CloseMatterRequest Body { get; set; }

            ///<summary>Returns the body of the request.</summary>
            protected override object GetBody() { return Body; }

            ///<summary>Gets the method name.</summary>
            public override string MethodName
            {
                get { return "close"; }
            }

            ///<summary>Gets the HTTP method.</summary>
            public override string HttpMethod
            {
                get { return "POST"; }
            }

            ///<summary>Gets the REST path.</summary>
            public override string RestPath
            {
                get { return "v1/matters/{matterId}:close"; }
            }

            /// <summary>Initializes Close parameter list.</summary>
            protected override void InitParameters()
            {
                base.InitParameters();

                RequestParameters.Add(
                    "matterId", new Google.Apis.Discovery.Parameter
                    {
                        Name = "matterId",
                        IsRequired = true,
                        ParameterType = "path",
                        DefaultValue = null,
                        Pattern = null,
                    });
            }

        }

        /// <summary>Creates a new matter with the given name and description. The initial state is open, and the owner
        /// is the method caller. Returns the created matter with default view.</summary>
        /// <param name="body">The body of the request.</param>
        public virtual CreateRequest Create(Google.Apis.Vault.v1.Data.Matter body)
        {
            return new CreateRequest(service, body);
        }

        /// <summary>Creates a new matter with the given name and description. The initial state is open, and the owner
        /// is the method caller. Returns the created matter with default view.</summary>
        public class CreateRequest : VaultBaseServiceRequest<Google.Apis.Vault.v1.Data.Matter>
        {
            /// <summary>Constructs a new Create request.</summary>
            public CreateRequest(Google.Apis.Services.IClientService service, Google.Apis.Vault.v1.Data.Matter body)
                : base(service)
            {
                Body = body;
                InitParameters();
            }



            /// <summary>Gets or sets the body of this request.</summary>
            Google.Apis.Vault.v1.Data.Matter Body { get; set; }

            ///<summary>Returns the body of the request.</summary>
            protected override object GetBody() { return Body; }

            ///<summary>Gets the method name.</summary>
            public override string MethodName
            {
                get { return "create"; }
            }

            ///<summary>Gets the HTTP method.</summary>
            public override string HttpMethod
            {
                get { return "POST"; }
            }

            ///<summary>Gets the REST path.</summary>
            public override string RestPath
            {
                get { return "v1/matters"; }
            }

            /// <summary>Initializes Create parameter list.</summary>
            protected override void InitParameters()
            {
                base.InitParameters();

            }

        }

        /// <summary>Deletes the specified matter. Returns matter with updated state.</summary>
        /// <param name="matterId">The matter ID</param>
        public virtual DeleteRequest Delete(string matterId)
        {
            return new DeleteRequest(service, matterId);
        }

        /// <summary>Deletes the specified matter. Returns matter with updated state.</summary>
        public class DeleteRequest : VaultBaseServiceRequest<Google.Apis.Vault.v1.Data.Matter>
        {
            /// <summary>Constructs a new Delete request.</summary>
            public DeleteRequest(Google.Apis.Services.IClientService service, string matterId)
                : base(service)
            {
                MatterId = matterId;
                InitParameters();
            }


            /// <summary>The matter ID</summary>
            [Google.Apis.Util.RequestParameterAttribute("matterId", Google.Apis.Util.RequestParameterType.Path)]
            public virtual string MatterId { get; private set; }


            ///<summary>Gets the method name.</summary>
            public override string MethodName
            {
                get { return "delete"; }
            }

            ///<summary>Gets the HTTP method.</summary>
            public override string HttpMethod
            {
                get { return "DELETE"; }
            }

            ///<summary>Gets the REST path.</summary>
            public override string RestPath
            {
                get { return "v1/matters/{matterId}"; }
            }

            /// <summary>Initializes Delete parameter list.</summary>
            protected override void InitParameters()
            {
                base.InitParameters();

                RequestParameters.Add(
                    "matterId", new Google.Apis.Discovery.Parameter
                    {
                        Name = "matterId",
                        IsRequired = true,
                        ParameterType = "path",
                        DefaultValue = null,
                        Pattern = null,
                    });
            }

        }

        /// <summary>Gets the specified matter.</summary>
        /// <param name="matterId">The matter ID.</param>
        public virtual GetRequest Get(string matterId)
        {
            return new GetRequest(service, matterId);
        }

        /// <summary>Gets the specified matter.</summary>
        public class GetRequest : VaultBaseServiceRequest<Google.Apis.Vault.v1.Data.Matter>
        {
            /// <summary>Constructs a new Get request.</summary>
            public GetRequest(Google.Apis.Services.IClientService service, string matterId)
                : base(service)
            {
                MatterId = matterId;
                InitParameters();
            }


            /// <summary>The matter ID.</summary>
            [Google.Apis.Util.RequestParameterAttribute("matterId", Google.Apis.Util.RequestParameterType.Path)]
            public virtual string MatterId { get; private set; }

            /// <summary>Specifies which parts of the Matter to return in the response.</summary>
            [Google.Apis.Util.RequestParameterAttribute("view", Google.Apis.Util.RequestParameterType.Query)]
            public virtual System.Nullable<ViewEnum> View { get; set; }

            /// <summary>Specifies which parts of the Matter to return in the response.</summary>
            public enum ViewEnum
            {
                [Google.Apis.Util.StringValueAttribute("VIEW_UNSPECIFIED")]
                VIEWUNSPECIFIED,
                [Google.Apis.Util.StringValueAttribute("BASIC")]
                BASIC,
                [Google.Apis.Util.StringValueAttribute("FULL")]
                FULL,
            }


            ///<summary>Gets the method name.</summary>
            public override string MethodName
            {
                get { return "get"; }
            }

            ///<summary>Gets the HTTP method.</summary>
            public override string HttpMethod
            {
                get { return "GET"; }
            }

            ///<summary>Gets the REST path.</summary>
            public override string RestPath
            {
                get { return "v1/matters/{matterId}"; }
            }

            /// <summary>Initializes Get parameter list.</summary>
            protected override void InitParameters()
            {
                base.InitParameters();

                RequestParameters.Add(
                    "matterId", new Google.Apis.Discovery.Parameter
                    {
                        Name = "matterId",
                        IsRequired = true,
                        ParameterType = "path",
                        DefaultValue = null,
                        Pattern = null,
                    });
                RequestParameters.Add(
                    "view", new Google.Apis.Discovery.Parameter
                    {
                        Name = "view",
                        IsRequired = false,
                        ParameterType = "query",
                        DefaultValue = null,
                        Pattern = null,
                    });
            }

        }

        /// <summary>Lists matters the user has access to.</summary>
        public virtual ListRequest List()
        {
            return new ListRequest(service);
        }

        /// <summary>Lists matters the user has access to.</summary>
        public class ListRequest : VaultBaseServiceRequest<Google.Apis.Vault.v1.Data.ListMattersResponse>
        {
            /// <summary>Constructs a new List request.</summary>
            public ListRequest(Google.Apis.Services.IClientService service)
                : base(service)
            {
                InitParameters();
            }


            /// <summary>The number of matters to return in the response. Default and maximum are 100.</summary>
            [Google.Apis.Util.RequestParameterAttribute("pageSize", Google.Apis.Util.RequestParameterType.Query)]
            public virtual System.Nullable<int> PageSize { get; set; }

            /// <summary>Specifies which parts of the matter to return in response.</summary>
            [Google.Apis.Util.RequestParameterAttribute("view", Google.Apis.Util.RequestParameterType.Query)]
            public virtual System.Nullable<ViewEnum> View { get; set; }

            /// <summary>Specifies which parts of the matter to return in response.</summary>
            public enum ViewEnum
            {
                [Google.Apis.Util.StringValueAttribute("VIEW_UNSPECIFIED")]
                VIEWUNSPECIFIED,
                [Google.Apis.Util.StringValueAttribute("BASIC")]
                BASIC,
                [Google.Apis.Util.StringValueAttribute("FULL")]
                FULL,
            }

            /// <summary>If set, list only matters with that specific state. The default is listing matters of all
            /// states.</summary>
            [Google.Apis.Util.RequestParameterAttribute("state", Google.Apis.Util.RequestParameterType.Query)]
            public virtual System.Nullable<StateEnum> State { get; set; }

            /// <summary>If set, list only matters with that specific state. The default is listing matters of all
            /// states.</summary>
            public enum StateEnum
            {
                [Google.Apis.Util.StringValueAttribute("STATE_UNSPECIFIED")]
                STATEUNSPECIFIED,
                [Google.Apis.Util.StringValueAttribute("OPEN")]
                OPEN,
                [Google.Apis.Util.StringValueAttribute("CLOSED")]
                CLOSED,
                [Google.Apis.Util.StringValueAttribute("DELETED")]
                DELETED,
            }

            /// <summary>The pagination token as returned in the response.</summary>
            [Google.Apis.Util.RequestParameterAttribute("pageToken", Google.Apis.Util.RequestParameterType.Query)]
            public virtual string PageToken { get; set; }


            ///<summary>Gets the method name.</summary>
            public override string MethodName
            {
                get { return "list"; }
            }

            ///<summary>Gets the HTTP method.</summary>
            public override string HttpMethod
            {
                get { return "GET"; }
            }

            ///<summary>Gets the REST path.</summary>
            public override string RestPath
            {
                get { return "v1/matters"; }
            }

            /// <summary>Initializes List parameter list.</summary>
            protected override void InitParameters()
            {
                base.InitParameters();

                RequestParameters.Add(
                    "pageSize", new Google.Apis.Discovery.Parameter
                    {
                        Name = "pageSize",
                        IsRequired = false,
                        ParameterType = "query",
                        DefaultValue = null,
                        Pattern = null,
                    });
                RequestParameters.Add(
                    "view", new Google.Apis.Discovery.Parameter
                    {
                        Name = "view",
                        IsRequired = false,
                        ParameterType = "query",
                        DefaultValue = null,
                        Pattern = null,
                    });
                RequestParameters.Add(
                    "state", new Google.Apis.Discovery.Parameter
                    {
                        Name = "state",
                        IsRequired = false,
                        ParameterType = "query",
                        DefaultValue = null,
                        Pattern = null,
                    });
                RequestParameters.Add(
                    "pageToken", new Google.Apis.Discovery.Parameter
                    {
                        Name = "pageToken",
                        IsRequired = false,
                        ParameterType = "query",
                        DefaultValue = null,
                        Pattern = null,
                    });
            }

        }

        /// <summary>Removes an account as a matter collaborator.</summary>
        /// <param name="body">The body of the request.</param>
        /// <param name="matterId">The matter ID.</param>
        public virtual RemovePermissionsRequest RemovePermissions(Google.Apis.Vault.v1.Data.RemoveMatterPermissionsRequest body, string matterId)
        {
            return new RemovePermissionsRequest(service, body, matterId);
        }

        /// <summary>Removes an account as a matter collaborator.</summary>
        public class RemovePermissionsRequest : VaultBaseServiceRequest<Google.Apis.Vault.v1.Data.Empty>
        {
            /// <summary>Constructs a new RemovePermissions request.</summary>
            public RemovePermissionsRequest(Google.Apis.Services.IClientService service, Google.Apis.Vault.v1.Data.RemoveMatterPermissionsRequest body, string matterId)
                : base(service)
            {
                MatterId = matterId;
                Body = body;
                InitParameters();
            }


            /// <summary>The matter ID.</summary>
            [Google.Apis.Util.RequestParameterAttribute("matterId", Google.Apis.Util.RequestParameterType.Path)]
            public virtual string MatterId { get; private set; }


            /// <summary>Gets or sets the body of this request.</summary>
            Google.Apis.Vault.v1.Data.RemoveMatterPermissionsRequest Body { get; set; }

            ///<summary>Returns the body of the request.</summary>
            protected override object GetBody() { return Body; }

            ///<summary>Gets the method name.</summary>
            public override string MethodName
            {
                get { return "removePermissions"; }
            }

            ///<summary>Gets the HTTP method.</summary>
            public override string HttpMethod
            {
                get { return "POST"; }
            }

            ///<summary>Gets the REST path.</summary>
            public override string RestPath
            {
                get { return "v1/matters/{matterId}:removePermissions"; }
            }

            /// <summary>Initializes RemovePermissions parameter list.</summary>
            protected override void InitParameters()
            {
                base.InitParameters();

                RequestParameters.Add(
                    "matterId", new Google.Apis.Discovery.Parameter
                    {
                        Name = "matterId",
                        IsRequired = true,
                        ParameterType = "path",
                        DefaultValue = null,
                        Pattern = null,
                    });
            }

        }

        /// <summary>Reopens the specified matter. Returns matter with updated state.</summary>
        /// <param name="body">The body of the request.</param>
        /// <param name="matterId">The matter ID.</param>
        public virtual ReopenRequest Reopen(Google.Apis.Vault.v1.Data.ReopenMatterRequest body, string matterId)
        {
            return new ReopenRequest(service, body, matterId);
        }

        /// <summary>Reopens the specified matter. Returns matter with updated state.</summary>
        public class ReopenRequest : VaultBaseServiceRequest<Google.Apis.Vault.v1.Data.ReopenMatterResponse>
        {
            /// <summary>Constructs a new Reopen request.</summary>
            public ReopenRequest(Google.Apis.Services.IClientService service, Google.Apis.Vault.v1.Data.ReopenMatterRequest body, string matterId)
                : base(service)
            {
                MatterId = matterId;
                Body = body;
                InitParameters();
            }


            /// <summary>The matter ID.</summary>
            [Google.Apis.Util.RequestParameterAttribute("matterId", Google.Apis.Util.RequestParameterType.Path)]
            public virtual string MatterId { get; private set; }


            /// <summary>Gets or sets the body of this request.</summary>
            Google.Apis.Vault.v1.Data.ReopenMatterRequest Body { get; set; }

            ///<summary>Returns the body of the request.</summary>
            protected override object GetBody() { return Body; }

            ///<summary>Gets the method name.</summary>
            public override string MethodName
            {
                get { return "reopen"; }
            }

            ///<summary>Gets the HTTP method.</summary>
            public override string HttpMethod
            {
                get { return "POST"; }
            }

            ///<summary>Gets the REST path.</summary>
            public override string RestPath
            {
                get { return "v1/matters/{matterId}:reopen"; }
            }

            /// <summary>Initializes Reopen parameter list.</summary>
            protected override void InitParameters()
            {
                base.InitParameters();

                RequestParameters.Add(
                    "matterId", new Google.Apis.Discovery.Parameter
                    {
                        Name = "matterId",
                        IsRequired = true,
                        ParameterType = "path",
                        DefaultValue = null,
                        Pattern = null,
                    });
            }

        }

        /// <summary>Undeletes the specified matter. Returns matter with updated state.</summary>
        /// <param name="body">The body of the request.</param>
        /// <param name="matterId">The matter ID.</param>
        public virtual UndeleteRequest Undelete(Google.Apis.Vault.v1.Data.UndeleteMatterRequest body, string matterId)
        {
            return new UndeleteRequest(service, body, matterId);
        }

        /// <summary>Undeletes the specified matter. Returns matter with updated state.</summary>
        public class UndeleteRequest : VaultBaseServiceRequest<Google.Apis.Vault.v1.Data.Matter>
        {
            /// <summary>Constructs a new Undelete request.</summary>
            public UndeleteRequest(Google.Apis.Services.IClientService service, Google.Apis.Vault.v1.Data.UndeleteMatterRequest body, string matterId)
                : base(service)
            {
                MatterId = matterId;
                Body = body;
                InitParameters();
            }


            /// <summary>The matter ID.</summary>
            [Google.Apis.Util.RequestParameterAttribute("matterId", Google.Apis.Util.RequestParameterType.Path)]
            public virtual string MatterId { get; private set; }


            /// <summary>Gets or sets the body of this request.</summary>
            Google.Apis.Vault.v1.Data.UndeleteMatterRequest Body { get; set; }

            ///<summary>Returns the body of the request.</summary>
            protected override object GetBody() { return Body; }

            ///<summary>Gets the method name.</summary>
            public override string MethodName
            {
                get { return "undelete"; }
            }

            ///<summary>Gets the HTTP method.</summary>
            public override string HttpMethod
            {
                get { return "POST"; }
            }

            ///<summary>Gets the REST path.</summary>
            public override string RestPath
            {
                get { return "v1/matters/{matterId}:undelete"; }
            }

            /// <summary>Initializes Undelete parameter list.</summary>
            protected override void InitParameters()
            {
                base.InitParameters();

                RequestParameters.Add(
                    "matterId", new Google.Apis.Discovery.Parameter
                    {
                        Name = "matterId",
                        IsRequired = true,
                        ParameterType = "path",
                        DefaultValue = null,
                        Pattern = null,
                    });
            }

        }

        /// <summary>Updates the specified matter. This updates only the name and description of the matter, identified
        /// by matter id. Changes to any other fields are ignored. Returns the default view of the matter.</summary>
        /// <param name="body">The body of the request.</param>
        /// <param name="matterId">The matter ID.</param>
        public virtual UpdateRequest Update(Google.Apis.Vault.v1.Data.Matter body, string matterId)
        {
            return new UpdateRequest(service, body, matterId);
        }

        /// <summary>Updates the specified matter. This updates only the name and description of the matter, identified
        /// by matter id. Changes to any other fields are ignored. Returns the default view of the matter.</summary>
        public class UpdateRequest : VaultBaseServiceRequest<Google.Apis.Vault.v1.Data.Matter>
        {
            /// <summary>Constructs a new Update request.</summary>
            public UpdateRequest(Google.Apis.Services.IClientService service, Google.Apis.Vault.v1.Data.Matter body, string matterId)
                : base(service)
            {
                MatterId = matterId;
                Body = body;
                InitParameters();
            }


            /// <summary>The matter ID.</summary>
            [Google.Apis.Util.RequestParameterAttribute("matterId", Google.Apis.Util.RequestParameterType.Path)]
            public virtual string MatterId { get; private set; }


            /// <summary>Gets or sets the body of this request.</summary>
            Google.Apis.Vault.v1.Data.Matter Body { get; set; }

            ///<summary>Returns the body of the request.</summary>
            protected override object GetBody() { return Body; }

            ///<summary>Gets the method name.</summary>
            public override string MethodName
            {
                get { return "update"; }
            }

            ///<summary>Gets the HTTP method.</summary>
            public override string HttpMethod
            {
                get { return "PUT"; }
            }

            ///<summary>Gets the REST path.</summary>
            public override string RestPath
            {
                get { return "v1/matters/{matterId}"; }
            }

            /// <summary>Initializes Update parameter list.</summary>
            protected override void InitParameters()
            {
                base.InitParameters();

                RequestParameters.Add(
                    "matterId", new Google.Apis.Discovery.Parameter
                    {
                        Name = "matterId",
                        IsRequired = true,
                        ParameterType = "path",
                        DefaultValue = null,
                        Pattern = null,
                    });
            }

        }
    }
}

namespace Google.Apis.Vault.v1.Data
{    

    /// <summary>Add an account with the permission specified. The role cannot be owner. If an account already has a
    /// role in the matter, it will be overwritten.</summary>
    public class AddMatterPermissionsRequest : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>Only relevant if send_emails is true. True to CC requestor in the email message. False to not CC
        /// requestor.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ccMe")]
        public virtual System.Nullable<bool> CcMe { get; set; } 

        /// <summary>The MatterPermission to add.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("matterPermission")]
        public virtual MatterPermission MatterPermission { get; set; } 

        /// <summary>True to send notification email to the added account. False to not send notification
        /// email.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sendEmails")]
        public virtual System.Nullable<bool> SendEmails { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>Close a matter by ID.</summary>
    public class CloseMatterRequest : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>Response to a CloseMatterRequest.</summary>
    public class CloseMatterResponse : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>The updated matter, with state CLOSED.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("matter")]
        public virtual Matter Matter { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>Corpus specific queries.</summary>
    public class CorpusQuery : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>Details pertaining to Drive holds. If set, corpus must be Drive.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("driveQuery")]
        public virtual HeldDriveQuery DriveQuery { get; set; } 

        /// <summary>Details pertaining to Groups holds. If set, corpus must be Groups.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("groupsQuery")]
        public virtual HeldGroupsQuery GroupsQuery { get; set; } 

        /// <summary>Details pertaining to mail holds. If set, corpus must be mail.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("mailQuery")]
        public virtual HeldMailQuery MailQuery { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A
    /// typical example is to use it as the request or the response type of an API method. For instance:
    ///
    /// service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
    ///
    /// The JSON representation for `Empty` is empty JSON object `{}`.</summary>
    public class Empty : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>An account being held in a particular hold. This structure is immutable. This can be either a single
    /// user or a google group, depending on the corpus.</summary>
    public class HeldAccount : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>The account's ID as provided by the Admin SDK.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("accountId")]
        public virtual string AccountId { get; set; } 

        /// <summary>When the account was put on hold.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("holdTime")]
        public virtual object HoldTime { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>Query options for drive holds.</summary>
    public class HeldDriveQuery : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>If true, include files in Team Drives in the hold.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("includeTeamDriveFiles")]
        public virtual System.Nullable<bool> IncludeTeamDriveFiles { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>Query options for group holds.</summary>
    public class HeldGroupsQuery : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>The end date range for the search query. These timestamps are in GMT and rounded down to the start
        /// of the given date.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("endTime")]
        public virtual object EndTime { get; set; } 

        /// <summary>The start date range for the search query. These timestamps are in GMT and rounded down to the
        /// start of the given date.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("startTime")]
        public virtual object StartTime { get; set; } 

        /// <summary>The search terms for the hold.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("terms")]
        public virtual string Terms { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>Query options for mail holds.</summary>
    public class HeldMailQuery : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>The end date range for the search query. These timestamps are in GMT and rounded down to the start
        /// of the given date.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("endTime")]
        public virtual object EndTime { get; set; } 

        /// <summary>The start date range for the search query. These timestamps are in GMT and rounded down to the
        /// start of the given date.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("startTime")]
        public virtual object StartTime { get; set; } 

        /// <summary>The search terms for the hold.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("terms")]
        public virtual string Terms { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>A organizational unit being held in a particular hold. This structure is immutable.</summary>
    public class HeldOrgUnit : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>When the org unit was put on hold. This property is immutable.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("holdTime")]
        public virtual object HoldTime { get; set; } 

        /// <summary>The org unit's immutable ID as provided by the admin SDK.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("orgUnitId")]
        public virtual string OrgUnitId { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>Represents a hold within Vault. A hold restricts purging of artifacts based on the combination of the
    /// query and accounts restrictions. A hold can be configured to either apply to an explicitly configured set of
    /// accounts, or can be applied to all members of an organizational unit.</summary>
    public class Hold : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>If set, the hold applies to the enumerated accounts and org_unit must be empty.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("accounts")]
        public virtual System.Collections.Generic.IList<HeldAccount> Accounts { get; set; } 

        /// <summary>The corpus to be searched.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("corpus")]
        public virtual string Corpus { get; set; } 

        /// <summary>The unique immutable ID of the hold. Assigned during creation.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("holdId")]
        public virtual string HoldId { get; set; } 

        /// <summary>The name of the hold.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("name")]
        public virtual string Name { get; set; } 

        /// <summary>If set, the hold applies to all members of the organizational unit and accounts must be empty. This
        /// property is mutable. For groups holds, set the accounts field.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("orgUnit")]
        public virtual HeldOrgUnit OrgUnit { get; set; } 

        /// <summary>The corpus-specific query. If set, the corpusQuery must match corpus type.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("query")]
        public virtual CorpusQuery Query { get; set; } 

        /// <summary>The last time this hold was modified.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("updateTime")]
        public virtual object UpdateTime { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>Returns a list of held accounts for a hold.</summary>
    public class ListHeldAccountsResponse : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>The held accounts on a hold.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("accounts")]
        public virtual System.Collections.Generic.IList<HeldAccount> Accounts { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>The holds for a matter.</summary>
    public class ListHoldsResponse : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>The list of holds.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("holds")]
        public virtual System.Collections.Generic.IList<Hold> Holds { get; set; } 

        /// <summary>Page token to retrieve the next page of results in the list. If this is empty, then there are no
        /// more holds to list.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("nextPageToken")]
        public virtual string NextPageToken { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>Provides the list of matters.</summary>
    public class ListMattersResponse : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>List of matters.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("matters")]
        public virtual System.Collections.Generic.IList<Matter> Matters { get; set; } 

        /// <summary>Page token to retrieve the next page of results in the list.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("nextPageToken")]
        public virtual string NextPageToken { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>Represents a matter.</summary>
    public class Matter : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>The description of the matter.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("description")]
        public virtual string Description { get; set; } 

        /// <summary>The matter ID which is generated by the server. Should be blank when creating a new
        /// matter.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("matterId")]
        public virtual string MatterId { get; set; } 

        /// <summary>List of users and access to the matter. Currently there is no programmer defined limit on the
        /// number of permissions a matter can have.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("matterPermissions")]
        public virtual System.Collections.Generic.IList<MatterPermission> MatterPermissions { get; set; } 

        /// <summary>The name of the matter.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("name")]
        public virtual string Name { get; set; } 

        /// <summary>The state of the matter.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("state")]
        public virtual string State { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>Currently each matter only has one owner, and all others are collaborators. When an account is purged,
    /// its corresponding MatterPermission resources cease to exist.</summary>
    public class MatterPermission : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>The account id, as provided by Admin SDK.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("accountId")]
        public virtual string AccountId { get; set; } 

        /// <summary>The user's role in this matter.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("role")]
        public virtual string Role { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>Remove an account as a matter collaborator.</summary>
    public class RemoveMatterPermissionsRequest : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>The account ID.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("accountId")]
        public virtual string AccountId { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>Reopen a matter by ID.</summary>
    public class ReopenMatterRequest : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>Response to a ReopenMatterRequest.</summary>
    public class ReopenMatterResponse : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>The updated matter, with state OPEN.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("matter")]
        public virtual Matter Matter { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>Undelete a matter by ID.</summary>
    public class UndeleteMatterRequest : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }
}
